{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "AgregarUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-agregarUser"
      }
    },
    "ObtenerUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-obtenerUser"
      }
    },
    "EliminarUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-eliminarUser"
      }
    },
    "ActualizarUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-actualizarUser"
      }
    },
    "ObtenerTodosUsuariosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-obtenerTodosUsuarios"
      }
    },
    "AgregarLaboratorioLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-agregarLaboratorio"
      }
    },
    "ObtenerLaboratorioLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-obtenerLaboratorio"
      }
    },
    "EliminarLaboratorioLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-eliminarLaboratorio"
      }
    },
    "ActualizarLaboratorioLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-actualizarLaboratorio"
      }
    },
    "AgregarAsignaturaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-agregarAsignatura"
      }
    },
    "ObtenerAsignaturaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-obtenerAsignatura"
      }
    },
    "EliminarAsignaturaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-eliminarAsignatura"
      }
    },
    "ActualizarAsignaturaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-actualizarAsignatura"
      }
    },
    "ObtenerTodasAsignaturasLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-obtenerTodasAsignaturas"
      }
    },
    "AgregarParcialLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-agregarParcial"
      }
    },
    "ObtenerParcialesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-obtenerParciales"
      }
    },
    "EliminarParcialLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-eliminarParcial"
      }
    },
    "ActualizarParcialLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-actualizarParcial"
      }
    },
    "AgregarPracticaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-agregarPractica"
      }
    },
    "ObtenerPracticasLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-obtenerPracticas"
      }
    },
    "EliminarPracticaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-eliminarPractica"
      }
    },
    "ActualizarPracticaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-actualizarPractica"
      }
    },
    "AgregarUsoEquipoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-agregarUsoEquipo"
      }
    },
    "ObtenerUsoEquipoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-obtenerUsoEquipo"
      }
    },
    "EliminarUsoEquipoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-eliminarUsoEquipo"
      }
    },
    "ActualizarUsoEquipoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/apiproductos-dev-actualizarUsoEquipo"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "apiproductos",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/apiproductos-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/apiproductos-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:648908580448:table/usuario",
                    "arn:aws:dynamodb:us-east-1:648908580448:table/laboratorios",
                    "arn:aws:dynamodb:us-east-1:648908580448:table/asignaturas",
                    "arn:aws:dynamodb:us-east-1:648908580448:table/parciales",
                    "arn:aws:dynamodb:us-east-1:648908580448:table/practicas",
                    "arn:aws:dynamodb:us-east-1:648908580448:table/usoEquipo"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "apiproductos",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AgregarUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/usuarios/agregarUser.agregarUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-agregarUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AgregarUserLogGroup"
      ]
    },
    "ObtenerUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/usuarios/obtenerUser.obtenerUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-obtenerUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ObtenerUserLogGroup"
      ]
    },
    "EliminarUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/usuarios/eliminarUser.eliminarUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-eliminarUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EliminarUserLogGroup"
      ]
    },
    "ActualizarUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/usuarios/actualizarUser.actualizarUser",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-actualizarUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ActualizarUserLogGroup"
      ]
    },
    "ObtenerTodosUsuariosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/usuarios/obtenerTodosUsuarios.obtenerTodosUsuarios",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-obtenerTodosUsuarios",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ObtenerTodosUsuariosLogGroup"
      ]
    },
    "AgregarLaboratorioLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/laboratorios/agregarLab.agregarLab",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-agregarLaboratorio",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AgregarLaboratorioLogGroup"
      ]
    },
    "ObtenerLaboratorioLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/laboratorios/obtenerLab.obtenerLab",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-obtenerLaboratorio",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ObtenerLaboratorioLogGroup"
      ]
    },
    "EliminarLaboratorioLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/laboratorios/eliminarLab.eliminarLab",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-eliminarLaboratorio",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EliminarLaboratorioLogGroup"
      ]
    },
    "ActualizarLaboratorioLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/laboratorios/actualizarLab.actualizarLab",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-actualizarLaboratorio",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ActualizarLaboratorioLogGroup"
      ]
    },
    "AgregarAsignaturaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/asignaturas/agregarAsig.agregarAsig",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-agregarAsignatura",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AgregarAsignaturaLogGroup"
      ]
    },
    "ObtenerAsignaturaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/asignaturas/obtenerAsig.obtenerAsig",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-obtenerAsignatura",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ObtenerAsignaturaLogGroup"
      ]
    },
    "EliminarAsignaturaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/asignaturas/eliminarAsig.eliminarAsig",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-eliminarAsignatura",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EliminarAsignaturaLogGroup"
      ]
    },
    "ActualizarAsignaturaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/asignaturas/actualizarAsig.actualizarAsig",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-actualizarAsignatura",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ActualizarAsignaturaLogGroup"
      ]
    },
    "ObtenerTodasAsignaturasLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/asignaturas/obtenerTodasAsignaturas.obtenerTodasAsignaturas",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-obtenerTodasAsignaturas",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ObtenerTodasAsignaturasLogGroup"
      ]
    },
    "AgregarParcialLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/parciales/agregarPar.agregarPar",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-agregarParcial",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AgregarParcialLogGroup"
      ]
    },
    "ObtenerParcialesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/parciales/obtenerPar.obtenerPar",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-obtenerParciales",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ObtenerParcialesLogGroup"
      ]
    },
    "EliminarParcialLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/parciales/eliminarPar.eliminarPar",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-eliminarParcial",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EliminarParcialLogGroup"
      ]
    },
    "ActualizarParcialLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/parciales/actualizarPar.actualizarPar",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-actualizarParcial",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ActualizarParcialLogGroup"
      ]
    },
    "AgregarPracticaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/practicas/agregarPract.agregarPract",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-agregarPractica",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AgregarPracticaLogGroup"
      ]
    },
    "ObtenerPracticasLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/practicas/obtenerPract.obtenerPract",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-obtenerPracticas",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ObtenerPracticasLogGroup"
      ]
    },
    "EliminarPracticaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/practicas/eliminarPract.eliminarPract",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-eliminarPractica",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EliminarPracticaLogGroup"
      ]
    },
    "ActualizarPracticaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/practicas/actualizarPract.actualizarPract",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-actualizarPractica",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ActualizarPracticaLogGroup"
      ]
    },
    "AgregarUsoEquipoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/usoEquipo/agregarEquip.agregarEquip",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-agregarUsoEquipo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AgregarUsoEquipoLogGroup"
      ]
    },
    "ObtenerUsoEquipoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/usoEquipo/obtenerEquip.obtenerEquip",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-obtenerUsoEquipo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ObtenerUsoEquipoLogGroup"
      ]
    },
    "EliminarUsoEquipoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/usoEquipo/eliminarEquip.eliminarEquip",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-eliminarUsoEquipo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EliminarUsoEquipoLogGroup"
      ]
    },
    "ActualizarUsoEquipoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
          "S3Key": "serverless/apiproductos/dev/1750993520309-2025-06-27T03:05:20.309Z/apiproductos.zip"
        },
        "Handler": "src/usoEquipo/actualizarEquip.actualizarEquip",
        "Runtime": "nodejs20.x",
        "FunctionName": "apiproductos-dev-actualizarUsoEquipo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ActualizarUsoEquipoLogGroup"
      ]
    },
    "AgregarUserLambdaVersionI1Mqo4p8tJHYrSxIfxJL9DQyxwDdx4pRGdemIwupc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AgregarUserLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ObtenerUserLambdaVersion525RFc4j4YGmMQHysQW6q1dXCI3K18PUxxB5Fk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ObtenerUserLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "EliminarUserLambdaVersionQm9eQZhJggyR1jRNEqx9H38pEGazw6TKvKUUkBU7K8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EliminarUserLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ActualizarUserLambdaVersionXMRAT6OZKYhjenmL3nPVPPGopCJ1EI0IK2K6GHtf6m0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ActualizarUserLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ObtenerTodosUsuariosLambdaVersion2pTcbq8mreZgGMk3sJ4mVo0cvmTuT6s7uLx53sgo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ObtenerTodosUsuariosLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "AgregarLaboratorioLambdaVersionMsQubv2Jlv2T4Bdxpv253Ei8gMSVDoVH3BEVCrNok": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AgregarLaboratorioLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ObtenerLaboratorioLambdaVersionrp0bTZ7U7ByXd7mxT9Q2mdIDpIHjrp5dQrL8qx1hjU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ObtenerLaboratorioLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "EliminarLaboratorioLambdaVersioneomRlJAWIwrqNlLg14XIhGV7BXVDO5JBKI8Qc0gk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EliminarLaboratorioLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ActualizarLaboratorioLambdaVersionMQBaAAVjJSomD2UNo5o1CQTkQ4opIxFfgrIyHu9fHA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ActualizarLaboratorioLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "AgregarAsignaturaLambdaVersionNGAL2oNkP3jSzyNC1bRXzDXYZuNy4vp1lMNPE8QiQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AgregarAsignaturaLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ObtenerAsignaturaLambdaVersion1zzeACtgN75AJtcLvQmtBTTPNJDARPilgKDRUOhY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ObtenerAsignaturaLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "EliminarAsignaturaLambdaVersionSr36G2fA29m3Do0W1M6NiGQ7sM8X1MXCueg7ZdPBI0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EliminarAsignaturaLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ActualizarAsignaturaLambdaVersiont5mKUOkv43t4xypaWx5ioZv3FZSatgHv1ilBWegYiY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ActualizarAsignaturaLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ObtenerTodasAsignaturasLambdaVersiontdWRjJXRzc4RtAgG9hNxchGG1Gtjs1yPMtbhxXm03Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ObtenerTodasAsignaturasLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "AgregarParcialLambdaVersionBg0useT3OTd7nSweGRXH7fqAmADYPHYZhfvA15BCTM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AgregarParcialLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ObtenerParcialesLambdaVersionti0r64cdeZxIxDlOo9lJjUIBik4VnEuGIDMvJIUM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ObtenerParcialesLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "EliminarParcialLambdaVersionBMN8Xwy3ECgEOybeZZ9EIZZ7DCgqrDcmKNdeOA9p0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EliminarParcialLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ActualizarParcialLambdaVersionX2judItWRxJqrp3XpgueUNi1fttWBuinF1LqZKtGM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ActualizarParcialLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "AgregarPracticaLambdaVersionJU6ok8OpiDThcBmmnmyQFThOg5hokQr2A0pRPKV3KE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AgregarPracticaLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ObtenerPracticasLambdaVersion0NPN0bLyQyNOyh7jTz7EkSHAP05z803SRsAVAmgw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ObtenerPracticasLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "EliminarPracticaLambdaVersionXQxW7onV4GiS84s5Or93jk6JlrthnxCF6VMpFDU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EliminarPracticaLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ActualizarPracticaLambdaVersionePB9aXEbmOa7SYwQRcyo1wp1Z7GbNqWaOYnZXNYQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ActualizarPracticaLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "AgregarUsoEquipoLambdaVersionpPFbXcatJIufrhVdPSQoqt8B7KFxJ1t8YyuGIJa3VU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AgregarUsoEquipoLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ObtenerUsoEquipoLambdaVersionOH7kKusbWHrWdjflPxpXvVakYHB77MqpXFwr2zNVVU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ObtenerUsoEquipoLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "EliminarUsoEquipoLambdaVersionyKOntMKhmEjze5ZEXkrsBStH6HzSi4P5bbRSNew7M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EliminarUsoEquipoLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "ActualizarUsoEquipoLambdaVersionNieA3ycSWlN7mLfOmCNYKq6gaTpIi06YRfm9BiBbyc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ActualizarUsoEquipoLambdaFunction"
        },
        "CodeSha256": "cECwbllVA7rQT9/X8hxPrLh3fV+4n+ASfcJlDd0yfgU="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-apiproductos",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type"
          ],
          "AllowMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "OPTIONS"
          ],
          "AllowOrigins": [
            "http://localhost:4200"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "AgregarUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AgregarUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAgregarUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AgregarUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostUsuario": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /usuario",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAgregarUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAgregarUser"
    },
    "ObtenerUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ObtenerUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationObtenerUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ObtenerUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUsuarioIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /usuario/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationObtenerUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationObtenerUser"
    },
    "EliminarUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EliminarUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEliminarUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EliminarUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteUsuarioIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /usuario/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEliminarUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEliminarUser"
    },
    "ActualizarUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ActualizarUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationActualizarUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ActualizarUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutUsuarioIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /usuario/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationActualizarUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationActualizarUser"
    },
    "ObtenerTodosUsuariosLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ObtenerTodosUsuariosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationObtenerTodosUsuarios": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ObtenerTodosUsuariosLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUsuarios": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /usuarios",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationObtenerTodosUsuarios"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationObtenerTodosUsuarios"
    },
    "AgregarLaboratorioLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AgregarLaboratorioLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAgregarLaboratorio": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AgregarLaboratorioLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostLaboratorio": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /laboratorio",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAgregarLaboratorio"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAgregarLaboratorio"
    },
    "ObtenerLaboratorioLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ObtenerLaboratorioLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationObtenerLaboratorio": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ObtenerLaboratorioLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetLaboratorioIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /laboratorio/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationObtenerLaboratorio"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationObtenerLaboratorio"
    },
    "EliminarLaboratorioLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EliminarLaboratorioLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEliminarLaboratorio": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EliminarLaboratorioLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteLaboratorioIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /laboratorio/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEliminarLaboratorio"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEliminarLaboratorio"
    },
    "ActualizarLaboratorioLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ActualizarLaboratorioLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationActualizarLaboratorio": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ActualizarLaboratorioLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutLaboratorioIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /laboratorio/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationActualizarLaboratorio"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationActualizarLaboratorio"
    },
    "AgregarAsignaturaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AgregarAsignaturaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAgregarAsignatura": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AgregarAsignaturaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAsignatura": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /asignatura",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAgregarAsignatura"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAgregarAsignatura"
    },
    "ObtenerAsignaturaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ObtenerAsignaturaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationObtenerAsignatura": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ObtenerAsignaturaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetAsignaturaIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /asignatura/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationObtenerAsignatura"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationObtenerAsignatura"
    },
    "EliminarAsignaturaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EliminarAsignaturaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEliminarAsignatura": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EliminarAsignaturaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteAsignaturaIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /asignatura/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEliminarAsignatura"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEliminarAsignatura"
    },
    "ActualizarAsignaturaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ActualizarAsignaturaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationActualizarAsignatura": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ActualizarAsignaturaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutAsignaturaIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /asignatura/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationActualizarAsignatura"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationActualizarAsignatura"
    },
    "ObtenerTodasAsignaturasLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ObtenerTodasAsignaturasLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationObtenerTodasAsignaturas": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ObtenerTodasAsignaturasLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetAsignaturas": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /asignaturas",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationObtenerTodasAsignaturas"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationObtenerTodasAsignaturas"
    },
    "AgregarParcialLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AgregarParcialLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAgregarParcial": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AgregarParcialLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostParciales": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /parciales",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAgregarParcial"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAgregarParcial"
    },
    "ObtenerParcialesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ObtenerParcialesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationObtenerParciales": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ObtenerParcialesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetParciales": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /parciales",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationObtenerParciales"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationObtenerParciales"
    },
    "EliminarParcialLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EliminarParcialLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEliminarParcial": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EliminarParcialLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteParcialesIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /parciales/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEliminarParcial"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEliminarParcial"
    },
    "ActualizarParcialLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ActualizarParcialLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationActualizarParcial": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ActualizarParcialLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutParcialesIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /parciales/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationActualizarParcial"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationActualizarParcial"
    },
    "AgregarPracticaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AgregarPracticaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAgregarPractica": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AgregarPracticaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostPracticas": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /practicas",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAgregarPractica"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAgregarPractica"
    },
    "ObtenerPracticasLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ObtenerPracticasLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationObtenerPracticas": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ObtenerPracticasLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetPracticas": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /practicas",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationObtenerPracticas"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationObtenerPracticas"
    },
    "EliminarPracticaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EliminarPracticaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEliminarPractica": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EliminarPracticaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeletePracticasIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /practicas/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEliminarPractica"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEliminarPractica"
    },
    "ActualizarPracticaLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ActualizarPracticaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationActualizarPractica": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ActualizarPracticaLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutPracticasIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /practicas/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationActualizarPractica"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationActualizarPractica"
    },
    "AgregarUsoEquipoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AgregarUsoEquipoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAgregarUsoEquipo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AgregarUsoEquipoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostUsoequipo": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /usoEquipo",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAgregarUsoEquipo"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAgregarUsoEquipo"
    },
    "ObtenerUsoEquipoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ObtenerUsoEquipoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationObtenerUsoEquipo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ObtenerUsoEquipoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUsoequipoIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /usoEquipo/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationObtenerUsoEquipo"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationObtenerUsoEquipo"
    },
    "EliminarUsoEquipoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EliminarUsoEquipoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEliminarUsoEquipo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EliminarUsoEquipoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteUsoequipoIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /usoEquipo/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEliminarUsoEquipo"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEliminarUsoEquipo"
    },
    "ActualizarUsoEquipoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ActualizarUsoEquipoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationActualizarUsoEquipo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ActualizarUsoEquipoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutUsoequipoIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /usoEquipo/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationActualizarUsoEquipo"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationActualizarUsoEquipo"
    },
    "UsuarioTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "usuario",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "LaboratoriosTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "laboratorios",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "AsignaturasTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "asignaturas",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "ParcialesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "parciales",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "PracticasTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "practicas",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "UsoEquipoTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "usoEquipo",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-1c6f9a6f-8b98",
      "Export": {
        "Name": "sls-apiproductos-dev-ServerlessDeploymentBucketName"
      }
    },
    "AgregarUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AgregarUserLambdaVersionI1Mqo4p8tJHYrSxIfxJL9DQyxwDdx4pRGdemIwupc"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-AgregarUserLambdaFunctionQualifiedArn"
      }
    },
    "ObtenerUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ObtenerUserLambdaVersion525RFc4j4YGmMQHysQW6q1dXCI3K18PUxxB5Fk"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ObtenerUserLambdaFunctionQualifiedArn"
      }
    },
    "EliminarUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EliminarUserLambdaVersionQm9eQZhJggyR1jRNEqx9H38pEGazw6TKvKUUkBU7K8"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-EliminarUserLambdaFunctionQualifiedArn"
      }
    },
    "ActualizarUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ActualizarUserLambdaVersionXMRAT6OZKYhjenmL3nPVPPGopCJ1EI0IK2K6GHtf6m0"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ActualizarUserLambdaFunctionQualifiedArn"
      }
    },
    "ObtenerTodosUsuariosLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ObtenerTodosUsuariosLambdaVersion2pTcbq8mreZgGMk3sJ4mVo0cvmTuT6s7uLx53sgo"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ObtenerTodosUsuariosLambdaFunctionQualifiedArn"
      }
    },
    "AgregarLaboratorioLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AgregarLaboratorioLambdaVersionMsQubv2Jlv2T4Bdxpv253Ei8gMSVDoVH3BEVCrNok"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-AgregarLaboratorioLambdaFunctionQualifiedArn"
      }
    },
    "ObtenerLaboratorioLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ObtenerLaboratorioLambdaVersionrp0bTZ7U7ByXd7mxT9Q2mdIDpIHjrp5dQrL8qx1hjU"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ObtenerLaboratorioLambdaFunctionQualifiedArn"
      }
    },
    "EliminarLaboratorioLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EliminarLaboratorioLambdaVersioneomRlJAWIwrqNlLg14XIhGV7BXVDO5JBKI8Qc0gk"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-EliminarLaboratorioLambdaFunctionQualifiedArn"
      }
    },
    "ActualizarLaboratorioLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ActualizarLaboratorioLambdaVersionMQBaAAVjJSomD2UNo5o1CQTkQ4opIxFfgrIyHu9fHA"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ActualizarLaboratorioLambdaFunctionQualifiedArn"
      }
    },
    "AgregarAsignaturaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AgregarAsignaturaLambdaVersionNGAL2oNkP3jSzyNC1bRXzDXYZuNy4vp1lMNPE8QiQ"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-AgregarAsignaturaLambdaFunctionQualifiedArn"
      }
    },
    "ObtenerAsignaturaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ObtenerAsignaturaLambdaVersion1zzeACtgN75AJtcLvQmtBTTPNJDARPilgKDRUOhY"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ObtenerAsignaturaLambdaFunctionQualifiedArn"
      }
    },
    "EliminarAsignaturaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EliminarAsignaturaLambdaVersionSr36G2fA29m3Do0W1M6NiGQ7sM8X1MXCueg7ZdPBI0"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-EliminarAsignaturaLambdaFunctionQualifiedArn"
      }
    },
    "ActualizarAsignaturaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ActualizarAsignaturaLambdaVersiont5mKUOkv43t4xypaWx5ioZv3FZSatgHv1ilBWegYiY"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ActualizarAsignaturaLambdaFunctionQualifiedArn"
      }
    },
    "ObtenerTodasAsignaturasLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ObtenerTodasAsignaturasLambdaVersiontdWRjJXRzc4RtAgG9hNxchGG1Gtjs1yPMtbhxXm03Q"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ObtenerTodasAsignaturasLambdaFunctionQualifiedArn"
      }
    },
    "AgregarParcialLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AgregarParcialLambdaVersionBg0useT3OTd7nSweGRXH7fqAmADYPHYZhfvA15BCTM"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-AgregarParcialLambdaFunctionQualifiedArn"
      }
    },
    "ObtenerParcialesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ObtenerParcialesLambdaVersionti0r64cdeZxIxDlOo9lJjUIBik4VnEuGIDMvJIUM"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ObtenerParcialesLambdaFunctionQualifiedArn"
      }
    },
    "EliminarParcialLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EliminarParcialLambdaVersionBMN8Xwy3ECgEOybeZZ9EIZZ7DCgqrDcmKNdeOA9p0"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-EliminarParcialLambdaFunctionQualifiedArn"
      }
    },
    "ActualizarParcialLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ActualizarParcialLambdaVersionX2judItWRxJqrp3XpgueUNi1fttWBuinF1LqZKtGM"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ActualizarParcialLambdaFunctionQualifiedArn"
      }
    },
    "AgregarPracticaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AgregarPracticaLambdaVersionJU6ok8OpiDThcBmmnmyQFThOg5hokQr2A0pRPKV3KE"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-AgregarPracticaLambdaFunctionQualifiedArn"
      }
    },
    "ObtenerPracticasLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ObtenerPracticasLambdaVersion0NPN0bLyQyNOyh7jTz7EkSHAP05z803SRsAVAmgw"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ObtenerPracticasLambdaFunctionQualifiedArn"
      }
    },
    "EliminarPracticaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EliminarPracticaLambdaVersionXQxW7onV4GiS84s5Or93jk6JlrthnxCF6VMpFDU"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-EliminarPracticaLambdaFunctionQualifiedArn"
      }
    },
    "ActualizarPracticaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ActualizarPracticaLambdaVersionePB9aXEbmOa7SYwQRcyo1wp1Z7GbNqWaOYnZXNYQ"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ActualizarPracticaLambdaFunctionQualifiedArn"
      }
    },
    "AgregarUsoEquipoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AgregarUsoEquipoLambdaVersionpPFbXcatJIufrhVdPSQoqt8B7KFxJ1t8YyuGIJa3VU"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-AgregarUsoEquipoLambdaFunctionQualifiedArn"
      }
    },
    "ObtenerUsoEquipoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ObtenerUsoEquipoLambdaVersionOH7kKusbWHrWdjflPxpXvVakYHB77MqpXFwr2zNVVU"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ObtenerUsoEquipoLambdaFunctionQualifiedArn"
      }
    },
    "EliminarUsoEquipoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EliminarUsoEquipoLambdaVersionyKOntMKhmEjze5ZEXkrsBStH6HzSi4P5bbRSNew7M"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-EliminarUsoEquipoLambdaFunctionQualifiedArn"
      }
    },
    "ActualizarUsoEquipoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ActualizarUsoEquipoLambdaVersionNieA3ycSWlN7mLfOmCNYKq6gaTpIi06YRfm9BiBbyc"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-ActualizarUsoEquipoLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-apiproductos-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-apiproductos-dev-HttpApiUrl"
      }
    }
  }
}