{
  "C:\\Users\\LENOVO\\Downloads\\Tarea3_C\\serverless.yml": {
    "versionFramework": "4.17.1",
    "servicePath": "C:\\Users\\LENOVO\\Downloads\\Tarea3_C\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "melanymoreira",
      "app": "servidor-melanymoreira",
      "service": "servidor-melanymoreira",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:*"
            ],
            "Resource": [
              "arn:aws:dynamodb:us-east-1:469647637171:table/usuario",
              "arn:aws:dynamodb:us-east-1:469647637171:table/laboratorios",
              "arn:aws:dynamodb:us-east-1:469647637171:table/asignaturas",
              "arn:aws:dynamodb:us-east-1:469647637171:table/parciales",
              "arn:aws:dynamodb:us-east-1:469647637171:table/practicas",
              "arn:aws:dynamodb:us-east-1:469647637171:table/usoEquipo"
            ]
          }
        ],
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "AgregarUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarUser"
              }
            },
            "ObtenerUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerUser"
              }
            },
            "EliminarUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarUser"
              }
            },
            "ActualizarUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarUser"
              }
            },
            "AgregarLaboratorioLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarLaboratorio"
              }
            },
            "ObtenerLaboratorioLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerLaboratorio"
              }
            },
            "EliminarLaboratorioLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarLaboratorio"
              }
            },
            "ActualizarLaboratorioLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarLaboratorio"
              }
            },
            "AgregarAsignaturaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarAsignatura"
              }
            },
            "ObtenerAsignaturaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerAsignatura"
              }
            },
            "EliminarAsignaturaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarAsignatura"
              }
            },
            "ActualizarAsignaturaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarAsignatura"
              }
            },
            "AgregarParcialLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarParcial"
              }
            },
            "ObtenerParcialesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerParciales"
              }
            },
            "EliminarParcialLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarParcial"
              }
            },
            "ActualizarParcialLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarParcial"
              }
            },
            "AgregarPracticaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarPractica"
              }
            },
            "ObtenerPracticasLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerPracticas"
              }
            },
            "EliminarPracticaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarPractica"
              }
            },
            "ActualizarPracticaLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarPractica"
              }
            },
            "AgregarUsoEquipoLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarUsoEquipo"
              }
            },
            "ObtenerUsoEquipoLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerUsoEquipo"
              }
            },
            "EliminarUsoEquipoLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarUsoEquipo"
              }
            },
            "ActualizarUsoEquipoLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarUsoEquipo"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "servidor-melanymoreira",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/servidor-melanymoreira-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/servidor-melanymoreira-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:*"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-east-1:469647637171:table/usuario",
                            "arn:aws:dynamodb:us-east-1:469647637171:table/laboratorios",
                            "arn:aws:dynamodb:us-east-1:469647637171:table/asignaturas",
                            "arn:aws:dynamodb:us-east-1:469647637171:table/parciales",
                            "arn:aws:dynamodb:us-east-1:469647637171:table/practicas",
                            "arn:aws:dynamodb:us-east-1:469647637171:table/usoEquipo"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "servidor-melanymoreira",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AgregarUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/usuarios/agregarUser.agregarUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-agregarUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AgregarUserLogGroup"
              ]
            },
            "ObtenerUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/usuarios/obtenerUser.obtenerUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-obtenerUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ObtenerUserLogGroup"
              ]
            },
            "EliminarUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/usuarios/eliminarUser.eliminarUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-eliminarUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EliminarUserLogGroup"
              ]
            },
            "ActualizarUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/usuarios/actualizarUser.actualizarUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-actualizarUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ActualizarUserLogGroup"
              ]
            },
            "AgregarLaboratorioLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/laboratorios/agregarLab.agregarLab",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-agregarLaboratorio",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AgregarLaboratorioLogGroup"
              ]
            },
            "ObtenerLaboratorioLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/laboratorios/obtenerLab.obtenerLab",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-obtenerLaboratorio",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ObtenerLaboratorioLogGroup"
              ]
            },
            "EliminarLaboratorioLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/laboratorios/eliminarLab.eliminarLab",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-eliminarLaboratorio",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EliminarLaboratorioLogGroup"
              ]
            },
            "ActualizarLaboratorioLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/laboratorios/actualizarLab.actualizarLab",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-actualizarLaboratorio",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ActualizarLaboratorioLogGroup"
              ]
            },
            "AgregarAsignaturaLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/asignaturas/agregarAsig.agregarAsig",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-agregarAsignatura",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AgregarAsignaturaLogGroup"
              ]
            },
            "ObtenerAsignaturaLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/asignaturas/obtenerAsig.obtenerAsig",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-obtenerAsignatura",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ObtenerAsignaturaLogGroup"
              ]
            },
            "EliminarAsignaturaLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/asignaturas/eliminarAsig.eliminarAsig",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-eliminarAsignatura",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EliminarAsignaturaLogGroup"
              ]
            },
            "ActualizarAsignaturaLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/asignaturas/actualizarAsig.actualizarAsig",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-actualizarAsignatura",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ActualizarAsignaturaLogGroup"
              ]
            },
            "AgregarParcialLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/parciales/agregarPar.agregarPar",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-agregarParcial",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AgregarParcialLogGroup"
              ]
            },
            "ObtenerParcialesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/parciales/obtenerPar.obtenerPar",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-obtenerParciales",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ObtenerParcialesLogGroup"
              ]
            },
            "EliminarParcialLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/parciales/eliminarPar.eliminarPar",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-eliminarParcial",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EliminarParcialLogGroup"
              ]
            },
            "ActualizarParcialLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/parciales/actualizarPar.actualizarPar",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-actualizarParcial",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ActualizarParcialLogGroup"
              ]
            },
            "AgregarPracticaLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/practicas/agregarPract.agregarPract",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-agregarPractica",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AgregarPracticaLogGroup"
              ]
            },
            "ObtenerPracticasLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/practicas/obtenerPract.obtenerPract",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-obtenerPracticas",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ObtenerPracticasLogGroup"
              ]
            },
            "EliminarPracticaLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/practicas/eliminarPract.eliminarPract",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-eliminarPractica",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EliminarPracticaLogGroup"
              ]
            },
            "ActualizarPracticaLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/practicas/actualizarPract.actualizarPract",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-actualizarPractica",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ActualizarPracticaLogGroup"
              ]
            },
            "AgregarUsoEquipoLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/usoEquipo/agregarEquip.agregarEquip",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-agregarUsoEquipo",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AgregarUsoEquipoLogGroup"
              ]
            },
            "ObtenerUsoEquipoLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/usoEquipo/obtenerEquip.obtenerEquip",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-obtenerUsoEquipo",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ObtenerUsoEquipoLogGroup"
              ]
            },
            "EliminarUsoEquipoLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/usoEquipo/eliminarEquip.eliminarEquip",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-eliminarUsoEquipo",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EliminarUsoEquipoLogGroup"
              ]
            },
            "ActualizarUsoEquipoLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                  "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
                },
                "Handler": "src/usoEquipo/actualizarEquip.actualizarEquip",
                "Runtime": "nodejs20.x",
                "FunctionName": "servidor-melanymoreira-dev-actualizarUsoEquipo",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ActualizarUsoEquipoLogGroup"
              ]
            },
            "AgregarUserLambdaVersionRgxEkZf66J79z4KD8QSA3TFVIEn7PRNCbLeasEdKU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AgregarUserLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ObtenerUserLambdaVersiono1AwuFyD5Jz9Aaqe23lzO7ehQaprOBZ1XVK9Ksehk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ObtenerUserLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "EliminarUserLambdaVersionlXaBJONwY1nCyKXQVhaHBrOJ9FuVWvyuP6gev5weis": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EliminarUserLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ActualizarUserLambdaVersionQBYO9DW55p0We32cSNNhYRx8Wwf9U27rCYXjFfvZmQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ActualizarUserLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "AgregarLaboratorioLambdaVersionvwoTv7sOQhbMMQmsUMRqyco1rLgC0cuKC73AkOUWts": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AgregarLaboratorioLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ObtenerLaboratorioLambdaVersionfkrvHMFzgJx5nxEzYUUGjIKgsYDEoS2Gx9mvlNOOSig": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ObtenerLaboratorioLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "EliminarLaboratorioLambdaVersionu7UKtobNoe19Q0D3xFUxUdIWzNhlhruYbLxPFvE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EliminarLaboratorioLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ActualizarLaboratorioLambdaVersion2i6bpCy2KrnE1T23D4LjwUJL9yT0pHNhNlU7Fihlf8s": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ActualizarLaboratorioLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "AgregarAsignaturaLambdaVersion2c7xU17MkygCHd7T0CjZXcP3YJ9bKwUdnUptErkKus": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AgregarAsignaturaLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ObtenerAsignaturaLambdaVersioneulum2JQ9L6sU9kYmpulrc5181ikieHdDTEKJaukw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ObtenerAsignaturaLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "EliminarAsignaturaLambdaVersiontgYA4aYEAC4fWhMa46rQFIIZFZA4Vh7n4zEuKtgsU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EliminarAsignaturaLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ActualizarAsignaturaLambdaVersionIbf9MjzHCFCxkwZqo7LpRbwLDhZCGCuVw8McabVQs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ActualizarAsignaturaLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "AgregarParcialLambdaVersionQCXVCo3ziFGCrPJvfpWcfQQNBvfkKRaaXruprryKms": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AgregarParcialLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ObtenerParcialesLambdaVersionWwSoTDRxqM5VWd2pu4Xms6kfMkc6WWPhzo2cc5DUVw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ObtenerParcialesLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "EliminarParcialLambdaVersionovWBDb28gcYu703xi9vPoUFPnMImwEzR2xMZkH21gA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EliminarParcialLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ActualizarParcialLambdaVersionTcC6iYVoYDbz00NnE6SSlRyjf1wrrs6oRSyIairi5k": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ActualizarParcialLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "AgregarPracticaLambdaVersion0oTxP2ZNOWlbzkym26M8ugz3w0c5CfrM5dWe4mhRt0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AgregarPracticaLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ObtenerPracticasLambdaVersion4t8hqSFvAhwnCMYWjIt4ElIO8pwv1lIV4ljZn3xf3TE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ObtenerPracticasLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "EliminarPracticaLambdaVersionj3hnFogLjhtL9vTLCZERJfuTqabuKC0RnjNCdaHQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EliminarPracticaLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ActualizarPracticaLambdaVersioncKQHIuYEZrNbXuGbT6DopAjZij5jraZcnj581zqebZQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ActualizarPracticaLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "AgregarUsoEquipoLambdaVersionH2L2K8YBryUTTe1GHNeB40ExYrEoDp2fAslmliMWTe8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AgregarUsoEquipoLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ObtenerUsoEquipoLambdaVersionPzBK5I7ACFll20wS1jSONs6cjSfnrVaCEAmUSEkY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ObtenerUsoEquipoLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "EliminarUsoEquipoLambdaVersionNv7uLlTMO4AtgnM3wrYYTao3qk8Pzez8G2If0gQb5OY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EliminarUsoEquipoLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "ActualizarUsoEquipoLambdaVersionFITmFcwU5o6HxgNk8bo1g2rSaXnWLRd3j3V1DaBUnY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ActualizarUsoEquipoLambdaFunction"
                },
                "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-servidor-melanymoreira",
                "ProtocolType": "HTTP"
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "AgregarUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AgregarUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationAgregarUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AgregarUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostUsuario": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /usuario",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAgregarUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationAgregarUser"
            },
            "ObtenerUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ObtenerUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationObtenerUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ObtenerUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetUsuarioIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /usuario/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationObtenerUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationObtenerUser"
            },
            "EliminarUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EliminarUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEliminarUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EliminarUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteUsuarioIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /usuario/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEliminarUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEliminarUser"
            },
            "ActualizarUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ActualizarUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationActualizarUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ActualizarUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutUsuarioIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /usuario/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationActualizarUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationActualizarUser"
            },
            "AgregarLaboratorioLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AgregarLaboratorioLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationAgregarLaboratorio": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AgregarLaboratorioLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostLaboratorio": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /laboratorio",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAgregarLaboratorio"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationAgregarLaboratorio"
            },
            "ObtenerLaboratorioLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ObtenerLaboratorioLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationObtenerLaboratorio": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ObtenerLaboratorioLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetLaboratorioIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /laboratorio/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationObtenerLaboratorio"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationObtenerLaboratorio"
            },
            "EliminarLaboratorioLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EliminarLaboratorioLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEliminarLaboratorio": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EliminarLaboratorioLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteLaboratorioIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /laboratorio/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEliminarLaboratorio"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEliminarLaboratorio"
            },
            "ActualizarLaboratorioLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ActualizarLaboratorioLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationActualizarLaboratorio": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ActualizarLaboratorioLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutLaboratorioIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /laboratorio/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationActualizarLaboratorio"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationActualizarLaboratorio"
            },
            "AgregarAsignaturaLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AgregarAsignaturaLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationAgregarAsignatura": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AgregarAsignaturaLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostAsignatura": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /asignatura",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAgregarAsignatura"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationAgregarAsignatura"
            },
            "ObtenerAsignaturaLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ObtenerAsignaturaLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationObtenerAsignatura": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ObtenerAsignaturaLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetAsignaturaIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /asignatura/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationObtenerAsignatura"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationObtenerAsignatura"
            },
            "EliminarAsignaturaLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EliminarAsignaturaLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEliminarAsignatura": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EliminarAsignaturaLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteAsignaturaIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /asignatura/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEliminarAsignatura"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEliminarAsignatura"
            },
            "ActualizarAsignaturaLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ActualizarAsignaturaLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationActualizarAsignatura": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ActualizarAsignaturaLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutAsignaturaIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /asignatura/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationActualizarAsignatura"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationActualizarAsignatura"
            },
            "AgregarParcialLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AgregarParcialLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationAgregarParcial": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AgregarParcialLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostParciales": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /parciales",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAgregarParcial"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationAgregarParcial"
            },
            "ObtenerParcialesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ObtenerParcialesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationObtenerParciales": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ObtenerParcialesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetParciales": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /parciales",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationObtenerParciales"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationObtenerParciales"
            },
            "EliminarParcialLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EliminarParcialLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEliminarParcial": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EliminarParcialLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteParcialesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /parciales/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEliminarParcial"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEliminarParcial"
            },
            "ActualizarParcialLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ActualizarParcialLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationActualizarParcial": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ActualizarParcialLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutParcialesIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /parciales/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationActualizarParcial"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationActualizarParcial"
            },
            "AgregarPracticaLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AgregarPracticaLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationAgregarPractica": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AgregarPracticaLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostPracticas": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /practicas",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAgregarPractica"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationAgregarPractica"
            },
            "ObtenerPracticasLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ObtenerPracticasLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationObtenerPracticas": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ObtenerPracticasLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetPracticas": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /practicas",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationObtenerPracticas"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationObtenerPracticas"
            },
            "EliminarPracticaLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EliminarPracticaLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEliminarPractica": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EliminarPracticaLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeletePracticasIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /practicas/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEliminarPractica"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEliminarPractica"
            },
            "ActualizarPracticaLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ActualizarPracticaLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationActualizarPractica": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ActualizarPracticaLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutPracticasIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /practicas/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationActualizarPractica"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationActualizarPractica"
            },
            "AgregarUsoEquipoLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AgregarUsoEquipoLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationAgregarUsoEquipo": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AgregarUsoEquipoLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostUsoequipo": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /usoEquipo",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAgregarUsoEquipo"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationAgregarUsoEquipo"
            },
            "ObtenerUsoEquipoLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ObtenerUsoEquipoLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationObtenerUsoEquipo": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ObtenerUsoEquipoLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetUsoequipoIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /usoEquipo/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationObtenerUsoEquipo"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationObtenerUsoEquipo"
            },
            "EliminarUsoEquipoLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EliminarUsoEquipoLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEliminarUsoEquipo": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EliminarUsoEquipoLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteUsoequipoIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /usoEquipo/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEliminarUsoEquipo"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEliminarUsoEquipo"
            },
            "ActualizarUsoEquipoLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ActualizarUsoEquipoLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationActualizarUsoEquipo": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ActualizarUsoEquipoLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutUsoequipoIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /usoEquipo/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationActualizarUsoEquipo"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationActualizarUsoEquipo"
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ServerlessDeploymentBucketName"
              }
            },
            "AgregarUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AgregarUserLambdaVersionRgxEkZf66J79z4KD8QSA3TFVIEn7PRNCbLeasEdKU"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-AgregarUserLambdaFunctionQualifiedArn"
              }
            },
            "ObtenerUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ObtenerUserLambdaVersiono1AwuFyD5Jz9Aaqe23lzO7ehQaprOBZ1XVK9Ksehk"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ObtenerUserLambdaFunctionQualifiedArn"
              }
            },
            "EliminarUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EliminarUserLambdaVersionlXaBJONwY1nCyKXQVhaHBrOJ9FuVWvyuP6gev5weis"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-EliminarUserLambdaFunctionQualifiedArn"
              }
            },
            "ActualizarUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ActualizarUserLambdaVersionQBYO9DW55p0We32cSNNhYRx8Wwf9U27rCYXjFfvZmQ"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ActualizarUserLambdaFunctionQualifiedArn"
              }
            },
            "AgregarLaboratorioLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AgregarLaboratorioLambdaVersionvwoTv7sOQhbMMQmsUMRqyco1rLgC0cuKC73AkOUWts"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-AgregarLaboratorioLambdaFunctionQualifiedArn"
              }
            },
            "ObtenerLaboratorioLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ObtenerLaboratorioLambdaVersionfkrvHMFzgJx5nxEzYUUGjIKgsYDEoS2Gx9mvlNOOSig"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ObtenerLaboratorioLambdaFunctionQualifiedArn"
              }
            },
            "EliminarLaboratorioLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EliminarLaboratorioLambdaVersionu7UKtobNoe19Q0D3xFUxUdIWzNhlhruYbLxPFvE"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-EliminarLaboratorioLambdaFunctionQualifiedArn"
              }
            },
            "ActualizarLaboratorioLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ActualizarLaboratorioLambdaVersion2i6bpCy2KrnE1T23D4LjwUJL9yT0pHNhNlU7Fihlf8s"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ActualizarLaboratorioLambdaFunctionQualifiedArn"
              }
            },
            "AgregarAsignaturaLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AgregarAsignaturaLambdaVersion2c7xU17MkygCHd7T0CjZXcP3YJ9bKwUdnUptErkKus"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-AgregarAsignaturaLambdaFunctionQualifiedArn"
              }
            },
            "ObtenerAsignaturaLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ObtenerAsignaturaLambdaVersioneulum2JQ9L6sU9kYmpulrc5181ikieHdDTEKJaukw"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ObtenerAsignaturaLambdaFunctionQualifiedArn"
              }
            },
            "EliminarAsignaturaLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EliminarAsignaturaLambdaVersiontgYA4aYEAC4fWhMa46rQFIIZFZA4Vh7n4zEuKtgsU"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-EliminarAsignaturaLambdaFunctionQualifiedArn"
              }
            },
            "ActualizarAsignaturaLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ActualizarAsignaturaLambdaVersionIbf9MjzHCFCxkwZqo7LpRbwLDhZCGCuVw8McabVQs"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ActualizarAsignaturaLambdaFunctionQualifiedArn"
              }
            },
            "AgregarParcialLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AgregarParcialLambdaVersionQCXVCo3ziFGCrPJvfpWcfQQNBvfkKRaaXruprryKms"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-AgregarParcialLambdaFunctionQualifiedArn"
              }
            },
            "ObtenerParcialesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ObtenerParcialesLambdaVersionWwSoTDRxqM5VWd2pu4Xms6kfMkc6WWPhzo2cc5DUVw"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ObtenerParcialesLambdaFunctionQualifiedArn"
              }
            },
            "EliminarParcialLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EliminarParcialLambdaVersionovWBDb28gcYu703xi9vPoUFPnMImwEzR2xMZkH21gA"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-EliminarParcialLambdaFunctionQualifiedArn"
              }
            },
            "ActualizarParcialLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ActualizarParcialLambdaVersionTcC6iYVoYDbz00NnE6SSlRyjf1wrrs6oRSyIairi5k"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ActualizarParcialLambdaFunctionQualifiedArn"
              }
            },
            "AgregarPracticaLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AgregarPracticaLambdaVersion0oTxP2ZNOWlbzkym26M8ugz3w0c5CfrM5dWe4mhRt0"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-AgregarPracticaLambdaFunctionQualifiedArn"
              }
            },
            "ObtenerPracticasLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ObtenerPracticasLambdaVersion4t8hqSFvAhwnCMYWjIt4ElIO8pwv1lIV4ljZn3xf3TE"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ObtenerPracticasLambdaFunctionQualifiedArn"
              }
            },
            "EliminarPracticaLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EliminarPracticaLambdaVersionj3hnFogLjhtL9vTLCZERJfuTqabuKC0RnjNCdaHQ"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-EliminarPracticaLambdaFunctionQualifiedArn"
              }
            },
            "ActualizarPracticaLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ActualizarPracticaLambdaVersioncKQHIuYEZrNbXuGbT6DopAjZij5jraZcnj581zqebZQ"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ActualizarPracticaLambdaFunctionQualifiedArn"
              }
            },
            "AgregarUsoEquipoLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AgregarUsoEquipoLambdaVersionH2L2K8YBryUTTe1GHNeB40ExYrEoDp2fAslmliMWTe8"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-AgregarUsoEquipoLambdaFunctionQualifiedArn"
              }
            },
            "ObtenerUsoEquipoLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ObtenerUsoEquipoLambdaVersionPzBK5I7ACFll20wS1jSONs6cjSfnrVaCEAmUSEkY"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ObtenerUsoEquipoLambdaFunctionQualifiedArn"
              }
            },
            "EliminarUsoEquipoLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EliminarUsoEquipoLambdaVersionNv7uLlTMO4AtgnM3wrYYTao3qk8Pzez8G2If0gQb5OY"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-EliminarUsoEquipoLambdaFunctionQualifiedArn"
              }
            },
            "ActualizarUsoEquipoLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ActualizarUsoEquipoLambdaVersionFITmFcwU5o6HxgNk8bo1g2rSaXnWLRd3j3V1DaBUnY"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-ActualizarUsoEquipoLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-servidor-melanymoreira-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "agregarUser": {
          "handler": "src/usuarios/agregarUser.agregarUser",
          "events": [
            {
              "httpApi": {
                "path": "/usuario",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/usuario"
            }
          ],
          "name": "servidor-melanymoreira-dev-agregarUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AgregarUserLambdaVersionRgxEkZf66J79z4KD8QSA3TFVIEn7PRNCbLeasEdKU"
        },
        "obtenerUser": {
          "handler": "src/usuarios/obtenerUser.obtenerUser",
          "events": [
            {
              "httpApi": {
                "path": "/usuario/{id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/usuario/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-obtenerUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ObtenerUserLambdaVersiono1AwuFyD5Jz9Aaqe23lzO7ehQaprOBZ1XVK9Ksehk"
        },
        "eliminarUser": {
          "handler": "src/usuarios/eliminarUser.eliminarUser",
          "events": [
            {
              "httpApi": {
                "path": "/usuario/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/usuario/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-eliminarUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EliminarUserLambdaVersionlXaBJONwY1nCyKXQVhaHBrOJ9FuVWvyuP6gev5weis"
        },
        "actualizarUser": {
          "handler": "src/usuarios/actualizarUser.actualizarUser",
          "events": [
            {
              "httpApi": {
                "path": "/usuario/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/usuario/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-actualizarUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ActualizarUserLambdaVersionQBYO9DW55p0We32cSNNhYRx8Wwf9U27rCYXjFfvZmQ"
        },
        "agregarLaboratorio": {
          "handler": "src/laboratorios/agregarLab.agregarLab",
          "events": [
            {
              "httpApi": {
                "path": "/laboratorio",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/laboratorio"
            }
          ],
          "name": "servidor-melanymoreira-dev-agregarLaboratorio",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AgregarLaboratorioLambdaVersionvwoTv7sOQhbMMQmsUMRqyco1rLgC0cuKC73AkOUWts"
        },
        "obtenerLaboratorio": {
          "handler": "src/laboratorios/obtenerLab.obtenerLab",
          "events": [
            {
              "httpApi": {
                "path": "/laboratorio/{id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/laboratorio/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-obtenerLaboratorio",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ObtenerLaboratorioLambdaVersionfkrvHMFzgJx5nxEzYUUGjIKgsYDEoS2Gx9mvlNOOSig"
        },
        "eliminarLaboratorio": {
          "handler": "src/laboratorios/eliminarLab.eliminarLab",
          "events": [
            {
              "httpApi": {
                "path": "/laboratorio/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/laboratorio/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-eliminarLaboratorio",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EliminarLaboratorioLambdaVersionu7UKtobNoe19Q0D3xFUxUdIWzNhlhruYbLxPFvE"
        },
        "actualizarLaboratorio": {
          "handler": "src/laboratorios/actualizarLab.actualizarLab",
          "events": [
            {
              "httpApi": {
                "path": "/laboratorio/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/laboratorio/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-actualizarLaboratorio",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ActualizarLaboratorioLambdaVersion2i6bpCy2KrnE1T23D4LjwUJL9yT0pHNhNlU7Fihlf8s"
        },
        "agregarAsignatura": {
          "handler": "src/asignaturas/agregarAsig.agregarAsig",
          "events": [
            {
              "httpApi": {
                "path": "/asignatura",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/asignatura"
            }
          ],
          "name": "servidor-melanymoreira-dev-agregarAsignatura",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AgregarAsignaturaLambdaVersion2c7xU17MkygCHd7T0CjZXcP3YJ9bKwUdnUptErkKus"
        },
        "obtenerAsignatura": {
          "handler": "src/asignaturas/obtenerAsig.obtenerAsig",
          "events": [
            {
              "httpApi": {
                "path": "/asignatura/{id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/asignatura/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-obtenerAsignatura",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ObtenerAsignaturaLambdaVersioneulum2JQ9L6sU9kYmpulrc5181ikieHdDTEKJaukw"
        },
        "eliminarAsignatura": {
          "handler": "src/asignaturas/eliminarAsig.eliminarAsig",
          "events": [
            {
              "httpApi": {
                "path": "/asignatura/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/asignatura/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-eliminarAsignatura",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EliminarAsignaturaLambdaVersiontgYA4aYEAC4fWhMa46rQFIIZFZA4Vh7n4zEuKtgsU"
        },
        "actualizarAsignatura": {
          "handler": "src/asignaturas/actualizarAsig.actualizarAsig",
          "events": [
            {
              "httpApi": {
                "path": "/asignatura/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/asignatura/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-actualizarAsignatura",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ActualizarAsignaturaLambdaVersionIbf9MjzHCFCxkwZqo7LpRbwLDhZCGCuVw8McabVQs"
        },
        "agregarParcial": {
          "handler": "src/parciales/agregarPar.agregarPar",
          "events": [
            {
              "httpApi": {
                "path": "/parciales",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/parciales"
            }
          ],
          "name": "servidor-melanymoreira-dev-agregarParcial",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AgregarParcialLambdaVersionQCXVCo3ziFGCrPJvfpWcfQQNBvfkKRaaXruprryKms"
        },
        "obtenerParciales": {
          "handler": "src/parciales/obtenerPar.obtenerPar",
          "events": [
            {
              "httpApi": {
                "path": "/parciales",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/parciales"
            }
          ],
          "name": "servidor-melanymoreira-dev-obtenerParciales",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ObtenerParcialesLambdaVersionWwSoTDRxqM5VWd2pu4Xms6kfMkc6WWPhzo2cc5DUVw"
        },
        "eliminarParcial": {
          "handler": "src/parciales/eliminarPar.eliminarPar",
          "events": [
            {
              "httpApi": {
                "path": "/parciales/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/parciales/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-eliminarParcial",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EliminarParcialLambdaVersionovWBDb28gcYu703xi9vPoUFPnMImwEzR2xMZkH21gA"
        },
        "actualizarParcial": {
          "handler": "src/parciales/actualizarPar.actualizarPar",
          "events": [
            {
              "httpApi": {
                "path": "/parciales/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/parciales/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-actualizarParcial",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ActualizarParcialLambdaVersionTcC6iYVoYDbz00NnE6SSlRyjf1wrrs6oRSyIairi5k"
        },
        "agregarPractica": {
          "handler": "src/practicas/agregarPract.agregarPract",
          "events": [
            {
              "httpApi": {
                "path": "/practicas",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/practicas"
            }
          ],
          "name": "servidor-melanymoreira-dev-agregarPractica",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AgregarPracticaLambdaVersion0oTxP2ZNOWlbzkym26M8ugz3w0c5CfrM5dWe4mhRt0"
        },
        "obtenerPracticas": {
          "handler": "src/practicas/obtenerPract.obtenerPract",
          "events": [
            {
              "httpApi": {
                "path": "/practicas",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/practicas"
            }
          ],
          "name": "servidor-melanymoreira-dev-obtenerPracticas",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ObtenerPracticasLambdaVersion4t8hqSFvAhwnCMYWjIt4ElIO8pwv1lIV4ljZn3xf3TE"
        },
        "eliminarPractica": {
          "handler": "src/practicas/eliminarPract.eliminarPract",
          "events": [
            {
              "httpApi": {
                "path": "/practicas/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/practicas/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-eliminarPractica",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EliminarPracticaLambdaVersionj3hnFogLjhtL9vTLCZERJfuTqabuKC0RnjNCdaHQ"
        },
        "actualizarPractica": {
          "handler": "src/practicas/actualizarPract.actualizarPract",
          "events": [
            {
              "httpApi": {
                "path": "/practicas/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/practicas/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-actualizarPractica",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ActualizarPracticaLambdaVersioncKQHIuYEZrNbXuGbT6DopAjZij5jraZcnj581zqebZQ"
        },
        "agregarUsoEquipo": {
          "handler": "src/usoEquipo/agregarEquip.agregarEquip",
          "events": [
            {
              "httpApi": {
                "path": "/usoEquipo",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/usoEquipo"
            }
          ],
          "name": "servidor-melanymoreira-dev-agregarUsoEquipo",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AgregarUsoEquipoLambdaVersionH2L2K8YBryUTTe1GHNeB40ExYrEoDp2fAslmliMWTe8"
        },
        "obtenerUsoEquipo": {
          "handler": "src/usoEquipo/obtenerEquip.obtenerEquip",
          "events": [
            {
              "httpApi": {
                "path": "/usoEquipo/{id}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/usoEquipo/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-obtenerUsoEquipo",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ObtenerUsoEquipoLambdaVersionPzBK5I7ACFll20wS1jSONs6cjSfnrVaCEAmUSEkY"
        },
        "eliminarUsoEquipo": {
          "handler": "src/usoEquipo/eliminarEquip.eliminarEquip",
          "events": [
            {
              "httpApi": {
                "path": "/usoEquipo/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/usoEquipo/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-eliminarUsoEquipo",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EliminarUsoEquipoLambdaVersionNv7uLlTMO4AtgnM3wrYYTao3qk8Pzez8G2If0gQb5OY"
        },
        "actualizarUsoEquipo": {
          "handler": "src/usoEquipo/actualizarEquip.actualizarEquip",
          "events": [
            {
              "httpApi": {
                "path": "/usoEquipo/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/usoEquipo/{id}"
            }
          ],
          "name": "servidor-melanymoreira-dev-actualizarUsoEquipo",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ActualizarUsoEquipoLambdaVersionFITmFcwU5o6HxgNk8bo1g2rSaXnWLRd3j3V1DaBUnY"
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:*"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:469647637171:table/usuario",
            "arn:aws:dynamodb:us-east-1:469647637171:table/laboratorios",
            "arn:aws:dynamodb:us-east-1:469647637171:table/asignaturas",
            "arn:aws:dynamodb:us-east-1:469647637171:table/parciales",
            "arn:aws:dynamodb:us-east-1:469647637171:table/practicas",
            "arn:aws:dynamodb:us-east-1:469647637171:table/usoEquipo"
          ]
        }
      ],
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "AgregarUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarUser"
            }
          },
          "ObtenerUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerUser"
            }
          },
          "EliminarUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarUser"
            }
          },
          "ActualizarUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarUser"
            }
          },
          "AgregarLaboratorioLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarLaboratorio"
            }
          },
          "ObtenerLaboratorioLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerLaboratorio"
            }
          },
          "EliminarLaboratorioLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarLaboratorio"
            }
          },
          "ActualizarLaboratorioLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarLaboratorio"
            }
          },
          "AgregarAsignaturaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarAsignatura"
            }
          },
          "ObtenerAsignaturaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerAsignatura"
            }
          },
          "EliminarAsignaturaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarAsignatura"
            }
          },
          "ActualizarAsignaturaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarAsignatura"
            }
          },
          "AgregarParcialLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarParcial"
            }
          },
          "ObtenerParcialesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerParciales"
            }
          },
          "EliminarParcialLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarParcial"
            }
          },
          "ActualizarParcialLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarParcial"
            }
          },
          "AgregarPracticaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarPractica"
            }
          },
          "ObtenerPracticasLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerPracticas"
            }
          },
          "EliminarPracticaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarPractica"
            }
          },
          "ActualizarPracticaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarPractica"
            }
          },
          "AgregarUsoEquipoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarUsoEquipo"
            }
          },
          "ObtenerUsoEquipoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerUsoEquipo"
            }
          },
          "EliminarUsoEquipoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarUsoEquipo"
            }
          },
          "ActualizarUsoEquipoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarUsoEquipo"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "servidor-melanymoreira",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/servidor-melanymoreira-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/servidor-melanymoreira-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:*"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-east-1:469647637171:table/usuario",
                          "arn:aws:dynamodb:us-east-1:469647637171:table/laboratorios",
                          "arn:aws:dynamodb:us-east-1:469647637171:table/asignaturas",
                          "arn:aws:dynamodb:us-east-1:469647637171:table/parciales",
                          "arn:aws:dynamodb:us-east-1:469647637171:table/practicas",
                          "arn:aws:dynamodb:us-east-1:469647637171:table/usoEquipo"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "servidor-melanymoreira",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AgregarUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/usuarios/agregarUser.agregarUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-agregarUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AgregarUserLogGroup"
            ]
          },
          "ObtenerUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/usuarios/obtenerUser.obtenerUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-obtenerUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ObtenerUserLogGroup"
            ]
          },
          "EliminarUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/usuarios/eliminarUser.eliminarUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-eliminarUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EliminarUserLogGroup"
            ]
          },
          "ActualizarUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/usuarios/actualizarUser.actualizarUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-actualizarUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ActualizarUserLogGroup"
            ]
          },
          "AgregarLaboratorioLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/laboratorios/agregarLab.agregarLab",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-agregarLaboratorio",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AgregarLaboratorioLogGroup"
            ]
          },
          "ObtenerLaboratorioLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/laboratorios/obtenerLab.obtenerLab",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-obtenerLaboratorio",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ObtenerLaboratorioLogGroup"
            ]
          },
          "EliminarLaboratorioLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/laboratorios/eliminarLab.eliminarLab",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-eliminarLaboratorio",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EliminarLaboratorioLogGroup"
            ]
          },
          "ActualizarLaboratorioLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/laboratorios/actualizarLab.actualizarLab",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-actualizarLaboratorio",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ActualizarLaboratorioLogGroup"
            ]
          },
          "AgregarAsignaturaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/asignaturas/agregarAsig.agregarAsig",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-agregarAsignatura",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AgregarAsignaturaLogGroup"
            ]
          },
          "ObtenerAsignaturaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/asignaturas/obtenerAsig.obtenerAsig",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-obtenerAsignatura",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ObtenerAsignaturaLogGroup"
            ]
          },
          "EliminarAsignaturaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/asignaturas/eliminarAsig.eliminarAsig",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-eliminarAsignatura",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EliminarAsignaturaLogGroup"
            ]
          },
          "ActualizarAsignaturaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/asignaturas/actualizarAsig.actualizarAsig",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-actualizarAsignatura",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ActualizarAsignaturaLogGroup"
            ]
          },
          "AgregarParcialLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/parciales/agregarPar.agregarPar",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-agregarParcial",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AgregarParcialLogGroup"
            ]
          },
          "ObtenerParcialesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/parciales/obtenerPar.obtenerPar",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-obtenerParciales",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ObtenerParcialesLogGroup"
            ]
          },
          "EliminarParcialLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/parciales/eliminarPar.eliminarPar",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-eliminarParcial",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EliminarParcialLogGroup"
            ]
          },
          "ActualizarParcialLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/parciales/actualizarPar.actualizarPar",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-actualizarParcial",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ActualizarParcialLogGroup"
            ]
          },
          "AgregarPracticaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/practicas/agregarPract.agregarPract",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-agregarPractica",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AgregarPracticaLogGroup"
            ]
          },
          "ObtenerPracticasLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/practicas/obtenerPract.obtenerPract",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-obtenerPracticas",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ObtenerPracticasLogGroup"
            ]
          },
          "EliminarPracticaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/practicas/eliminarPract.eliminarPract",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-eliminarPractica",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EliminarPracticaLogGroup"
            ]
          },
          "ActualizarPracticaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/practicas/actualizarPract.actualizarPract",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-actualizarPractica",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ActualizarPracticaLogGroup"
            ]
          },
          "AgregarUsoEquipoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/usoEquipo/agregarEquip.agregarEquip",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-agregarUsoEquipo",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AgregarUsoEquipoLogGroup"
            ]
          },
          "ObtenerUsoEquipoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/usoEquipo/obtenerEquip.obtenerEquip",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-obtenerUsoEquipo",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ObtenerUsoEquipoLogGroup"
            ]
          },
          "EliminarUsoEquipoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/usoEquipo/eliminarEquip.eliminarEquip",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-eliminarUsoEquipo",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EliminarUsoEquipoLogGroup"
            ]
          },
          "ActualizarUsoEquipoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
                "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
              },
              "Handler": "src/usoEquipo/actualizarEquip.actualizarEquip",
              "Runtime": "nodejs20.x",
              "FunctionName": "servidor-melanymoreira-dev-actualizarUsoEquipo",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ActualizarUsoEquipoLogGroup"
            ]
          },
          "AgregarUserLambdaVersionRgxEkZf66J79z4KD8QSA3TFVIEn7PRNCbLeasEdKU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AgregarUserLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ObtenerUserLambdaVersiono1AwuFyD5Jz9Aaqe23lzO7ehQaprOBZ1XVK9Ksehk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ObtenerUserLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "EliminarUserLambdaVersionlXaBJONwY1nCyKXQVhaHBrOJ9FuVWvyuP6gev5weis": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EliminarUserLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ActualizarUserLambdaVersionQBYO9DW55p0We32cSNNhYRx8Wwf9U27rCYXjFfvZmQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ActualizarUserLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "AgregarLaboratorioLambdaVersionvwoTv7sOQhbMMQmsUMRqyco1rLgC0cuKC73AkOUWts": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AgregarLaboratorioLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ObtenerLaboratorioLambdaVersionfkrvHMFzgJx5nxEzYUUGjIKgsYDEoS2Gx9mvlNOOSig": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ObtenerLaboratorioLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "EliminarLaboratorioLambdaVersionu7UKtobNoe19Q0D3xFUxUdIWzNhlhruYbLxPFvE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EliminarLaboratorioLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ActualizarLaboratorioLambdaVersion2i6bpCy2KrnE1T23D4LjwUJL9yT0pHNhNlU7Fihlf8s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ActualizarLaboratorioLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "AgregarAsignaturaLambdaVersion2c7xU17MkygCHd7T0CjZXcP3YJ9bKwUdnUptErkKus": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AgregarAsignaturaLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ObtenerAsignaturaLambdaVersioneulum2JQ9L6sU9kYmpulrc5181ikieHdDTEKJaukw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ObtenerAsignaturaLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "EliminarAsignaturaLambdaVersiontgYA4aYEAC4fWhMa46rQFIIZFZA4Vh7n4zEuKtgsU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EliminarAsignaturaLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ActualizarAsignaturaLambdaVersionIbf9MjzHCFCxkwZqo7LpRbwLDhZCGCuVw8McabVQs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ActualizarAsignaturaLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "AgregarParcialLambdaVersionQCXVCo3ziFGCrPJvfpWcfQQNBvfkKRaaXruprryKms": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AgregarParcialLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ObtenerParcialesLambdaVersionWwSoTDRxqM5VWd2pu4Xms6kfMkc6WWPhzo2cc5DUVw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ObtenerParcialesLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "EliminarParcialLambdaVersionovWBDb28gcYu703xi9vPoUFPnMImwEzR2xMZkH21gA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EliminarParcialLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ActualizarParcialLambdaVersionTcC6iYVoYDbz00NnE6SSlRyjf1wrrs6oRSyIairi5k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ActualizarParcialLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "AgregarPracticaLambdaVersion0oTxP2ZNOWlbzkym26M8ugz3w0c5CfrM5dWe4mhRt0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AgregarPracticaLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ObtenerPracticasLambdaVersion4t8hqSFvAhwnCMYWjIt4ElIO8pwv1lIV4ljZn3xf3TE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ObtenerPracticasLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "EliminarPracticaLambdaVersionj3hnFogLjhtL9vTLCZERJfuTqabuKC0RnjNCdaHQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EliminarPracticaLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ActualizarPracticaLambdaVersioncKQHIuYEZrNbXuGbT6DopAjZij5jraZcnj581zqebZQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ActualizarPracticaLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "AgregarUsoEquipoLambdaVersionH2L2K8YBryUTTe1GHNeB40ExYrEoDp2fAslmliMWTe8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AgregarUsoEquipoLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ObtenerUsoEquipoLambdaVersionPzBK5I7ACFll20wS1jSONs6cjSfnrVaCEAmUSEkY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ObtenerUsoEquipoLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "EliminarUsoEquipoLambdaVersionNv7uLlTMO4AtgnM3wrYYTao3qk8Pzez8G2If0gQb5OY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EliminarUsoEquipoLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "ActualizarUsoEquipoLambdaVersionFITmFcwU5o6HxgNk8bo1g2rSaXnWLRd3j3V1DaBUnY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ActualizarUsoEquipoLambdaFunction"
              },
              "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-servidor-melanymoreira",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "AgregarUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AgregarUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAgregarUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "AgregarUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsuario": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /usuario",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAgregarUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAgregarUser"
          },
          "ObtenerUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ObtenerUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationObtenerUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ObtenerUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsuarioIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /usuario/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationObtenerUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationObtenerUser"
          },
          "EliminarUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EliminarUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEliminarUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EliminarUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteUsuarioIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /usuario/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEliminarUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEliminarUser"
          },
          "ActualizarUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ActualizarUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationActualizarUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ActualizarUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsuarioIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /usuario/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationActualizarUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationActualizarUser"
          },
          "AgregarLaboratorioLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AgregarLaboratorioLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAgregarLaboratorio": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "AgregarLaboratorioLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostLaboratorio": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /laboratorio",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAgregarLaboratorio"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAgregarLaboratorio"
          },
          "ObtenerLaboratorioLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ObtenerLaboratorioLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationObtenerLaboratorio": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ObtenerLaboratorioLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetLaboratorioIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /laboratorio/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationObtenerLaboratorio"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationObtenerLaboratorio"
          },
          "EliminarLaboratorioLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EliminarLaboratorioLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEliminarLaboratorio": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EliminarLaboratorioLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteLaboratorioIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /laboratorio/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEliminarLaboratorio"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEliminarLaboratorio"
          },
          "ActualizarLaboratorioLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ActualizarLaboratorioLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationActualizarLaboratorio": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ActualizarLaboratorioLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutLaboratorioIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /laboratorio/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationActualizarLaboratorio"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationActualizarLaboratorio"
          },
          "AgregarAsignaturaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AgregarAsignaturaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAgregarAsignatura": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "AgregarAsignaturaLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAsignatura": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /asignatura",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAgregarAsignatura"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAgregarAsignatura"
          },
          "ObtenerAsignaturaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ObtenerAsignaturaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationObtenerAsignatura": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ObtenerAsignaturaLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetAsignaturaIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /asignatura/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationObtenerAsignatura"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationObtenerAsignatura"
          },
          "EliminarAsignaturaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EliminarAsignaturaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEliminarAsignatura": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EliminarAsignaturaLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteAsignaturaIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /asignatura/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEliminarAsignatura"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEliminarAsignatura"
          },
          "ActualizarAsignaturaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ActualizarAsignaturaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationActualizarAsignatura": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ActualizarAsignaturaLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutAsignaturaIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /asignatura/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationActualizarAsignatura"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationActualizarAsignatura"
          },
          "AgregarParcialLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AgregarParcialLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAgregarParcial": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "AgregarParcialLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostParciales": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /parciales",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAgregarParcial"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAgregarParcial"
          },
          "ObtenerParcialesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ObtenerParcialesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationObtenerParciales": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ObtenerParcialesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetParciales": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /parciales",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationObtenerParciales"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationObtenerParciales"
          },
          "EliminarParcialLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EliminarParcialLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEliminarParcial": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EliminarParcialLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteParcialesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /parciales/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEliminarParcial"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEliminarParcial"
          },
          "ActualizarParcialLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ActualizarParcialLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationActualizarParcial": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ActualizarParcialLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutParcialesIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /parciales/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationActualizarParcial"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationActualizarParcial"
          },
          "AgregarPracticaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AgregarPracticaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAgregarPractica": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "AgregarPracticaLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPracticas": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /practicas",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAgregarPractica"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAgregarPractica"
          },
          "ObtenerPracticasLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ObtenerPracticasLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationObtenerPracticas": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ObtenerPracticasLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetPracticas": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /practicas",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationObtenerPracticas"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationObtenerPracticas"
          },
          "EliminarPracticaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EliminarPracticaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEliminarPractica": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EliminarPracticaLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeletePracticasIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /practicas/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEliminarPractica"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEliminarPractica"
          },
          "ActualizarPracticaLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ActualizarPracticaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationActualizarPractica": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ActualizarPracticaLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutPracticasIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /practicas/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationActualizarPractica"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationActualizarPractica"
          },
          "AgregarUsoEquipoLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AgregarUsoEquipoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAgregarUsoEquipo": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "AgregarUsoEquipoLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostUsoequipo": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /usoEquipo",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAgregarUsoEquipo"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAgregarUsoEquipo"
          },
          "ObtenerUsoEquipoLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ObtenerUsoEquipoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationObtenerUsoEquipo": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ObtenerUsoEquipoLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetUsoequipoIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /usoEquipo/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationObtenerUsoEquipo"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationObtenerUsoEquipo"
          },
          "EliminarUsoEquipoLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EliminarUsoEquipoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEliminarUsoEquipo": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EliminarUsoEquipoLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteUsoequipoIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /usoEquipo/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEliminarUsoEquipo"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEliminarUsoEquipo"
          },
          "ActualizarUsoEquipoLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ActualizarUsoEquipoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationActualizarUsoEquipo": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ActualizarUsoEquipoLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePutUsoequipoIdVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PUT /usoEquipo/{id}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationActualizarUsoEquipo"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationActualizarUsoEquipo"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ServerlessDeploymentBucketName"
            }
          },
          "AgregarUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AgregarUserLambdaVersionRgxEkZf66J79z4KD8QSA3TFVIEn7PRNCbLeasEdKU"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-AgregarUserLambdaFunctionQualifiedArn"
            }
          },
          "ObtenerUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ObtenerUserLambdaVersiono1AwuFyD5Jz9Aaqe23lzO7ehQaprOBZ1XVK9Ksehk"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ObtenerUserLambdaFunctionQualifiedArn"
            }
          },
          "EliminarUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EliminarUserLambdaVersionlXaBJONwY1nCyKXQVhaHBrOJ9FuVWvyuP6gev5weis"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-EliminarUserLambdaFunctionQualifiedArn"
            }
          },
          "ActualizarUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ActualizarUserLambdaVersionQBYO9DW55p0We32cSNNhYRx8Wwf9U27rCYXjFfvZmQ"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ActualizarUserLambdaFunctionQualifiedArn"
            }
          },
          "AgregarLaboratorioLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AgregarLaboratorioLambdaVersionvwoTv7sOQhbMMQmsUMRqyco1rLgC0cuKC73AkOUWts"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-AgregarLaboratorioLambdaFunctionQualifiedArn"
            }
          },
          "ObtenerLaboratorioLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ObtenerLaboratorioLambdaVersionfkrvHMFzgJx5nxEzYUUGjIKgsYDEoS2Gx9mvlNOOSig"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ObtenerLaboratorioLambdaFunctionQualifiedArn"
            }
          },
          "EliminarLaboratorioLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EliminarLaboratorioLambdaVersionu7UKtobNoe19Q0D3xFUxUdIWzNhlhruYbLxPFvE"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-EliminarLaboratorioLambdaFunctionQualifiedArn"
            }
          },
          "ActualizarLaboratorioLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ActualizarLaboratorioLambdaVersion2i6bpCy2KrnE1T23D4LjwUJL9yT0pHNhNlU7Fihlf8s"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ActualizarLaboratorioLambdaFunctionQualifiedArn"
            }
          },
          "AgregarAsignaturaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AgregarAsignaturaLambdaVersion2c7xU17MkygCHd7T0CjZXcP3YJ9bKwUdnUptErkKus"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-AgregarAsignaturaLambdaFunctionQualifiedArn"
            }
          },
          "ObtenerAsignaturaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ObtenerAsignaturaLambdaVersioneulum2JQ9L6sU9kYmpulrc5181ikieHdDTEKJaukw"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ObtenerAsignaturaLambdaFunctionQualifiedArn"
            }
          },
          "EliminarAsignaturaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EliminarAsignaturaLambdaVersiontgYA4aYEAC4fWhMa46rQFIIZFZA4Vh7n4zEuKtgsU"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-EliminarAsignaturaLambdaFunctionQualifiedArn"
            }
          },
          "ActualizarAsignaturaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ActualizarAsignaturaLambdaVersionIbf9MjzHCFCxkwZqo7LpRbwLDhZCGCuVw8McabVQs"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ActualizarAsignaturaLambdaFunctionQualifiedArn"
            }
          },
          "AgregarParcialLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AgregarParcialLambdaVersionQCXVCo3ziFGCrPJvfpWcfQQNBvfkKRaaXruprryKms"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-AgregarParcialLambdaFunctionQualifiedArn"
            }
          },
          "ObtenerParcialesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ObtenerParcialesLambdaVersionWwSoTDRxqM5VWd2pu4Xms6kfMkc6WWPhzo2cc5DUVw"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ObtenerParcialesLambdaFunctionQualifiedArn"
            }
          },
          "EliminarParcialLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EliminarParcialLambdaVersionovWBDb28gcYu703xi9vPoUFPnMImwEzR2xMZkH21gA"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-EliminarParcialLambdaFunctionQualifiedArn"
            }
          },
          "ActualizarParcialLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ActualizarParcialLambdaVersionTcC6iYVoYDbz00NnE6SSlRyjf1wrrs6oRSyIairi5k"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ActualizarParcialLambdaFunctionQualifiedArn"
            }
          },
          "AgregarPracticaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AgregarPracticaLambdaVersion0oTxP2ZNOWlbzkym26M8ugz3w0c5CfrM5dWe4mhRt0"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-AgregarPracticaLambdaFunctionQualifiedArn"
            }
          },
          "ObtenerPracticasLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ObtenerPracticasLambdaVersion4t8hqSFvAhwnCMYWjIt4ElIO8pwv1lIV4ljZn3xf3TE"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ObtenerPracticasLambdaFunctionQualifiedArn"
            }
          },
          "EliminarPracticaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EliminarPracticaLambdaVersionj3hnFogLjhtL9vTLCZERJfuTqabuKC0RnjNCdaHQ"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-EliminarPracticaLambdaFunctionQualifiedArn"
            }
          },
          "ActualizarPracticaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ActualizarPracticaLambdaVersioncKQHIuYEZrNbXuGbT6DopAjZij5jraZcnj581zqebZQ"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ActualizarPracticaLambdaFunctionQualifiedArn"
            }
          },
          "AgregarUsoEquipoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AgregarUsoEquipoLambdaVersionH2L2K8YBryUTTe1GHNeB40ExYrEoDp2fAslmliMWTe8"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-AgregarUsoEquipoLambdaFunctionQualifiedArn"
            }
          },
          "ObtenerUsoEquipoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ObtenerUsoEquipoLambdaVersionPzBK5I7ACFll20wS1jSONs6cjSfnrVaCEAmUSEkY"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ObtenerUsoEquipoLambdaFunctionQualifiedArn"
            }
          },
          "EliminarUsoEquipoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EliminarUsoEquipoLambdaVersionNv7uLlTMO4AtgnM3wrYYTao3qk8Pzez8G2If0gQb5OY"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-EliminarUsoEquipoLambdaFunctionQualifiedArn"
            }
          },
          "ActualizarUsoEquipoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ActualizarUsoEquipoLambdaVersionFITmFcwU5o6HxgNk8bo1g2rSaXnWLRd3j3V1DaBUnY"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-ActualizarUsoEquipoLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-servidor-melanymoreira-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "7cmyBXxpDW5KcBLvPL",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "org: melanymoreira\r\napp: servidor-melanymoreira\r\nservice: servidor-melanymoreira\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:*\r\n      Resource:\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/usuario\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/laboratorios\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/asignaturas\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/parciales\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/practicas\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/usoEquipo\r\n\r\nfunctions:\r\n  # Funciones para la tabla usuarios\r\n  agregarUser:\r\n    handler: src/usuarios/agregarUser.agregarUser\r\n    events:\r\n      - httpApi:\r\n          path: /usuario\r\n          method: post\r\n\r\n  obtenerUser:\r\n    handler: src/usuarios/obtenerUser.obtenerUser\r\n    events:\r\n      - httpApi:\r\n          path: /usuario/{id}\r\n          method: get\r\n\r\n  eliminarUser:\r\n    handler: src/usuarios/eliminarUser.eliminarUser\r\n    events:\r\n      - httpApi:\r\n          path: /usuario/{id}\r\n          method: delete\r\n\r\n  actualizarUser:\r\n    handler: src/usuarios/actualizarUser.actualizarUser\r\n    events:\r\n      - httpApi:\r\n          path: /usuario/{id}\r\n          method: put\r\n  \r\n  # Funciones para la tabla laboratorios\r\n  agregarLaboratorio:\r\n    handler: src/laboratorios/agregarLab.agregarLab\r\n    events:\r\n      - httpApi:\r\n          path: /laboratorio\r\n          method: post\r\n  \r\n  obtenerLaboratorio:\r\n    handler: src/laboratorios/obtenerLab.obtenerLab\r\n    events:\r\n      - httpApi:\r\n          path: /laboratorio/{id}\r\n          method: get\r\n  \r\n  eliminarLaboratorio:\r\n    handler: src/laboratorios/eliminarLab.eliminarLab\r\n    events:\r\n      - httpApi:\r\n          path: /laboratorio/{id}\r\n          method: delete\r\n  \r\n  actualizarLaboratorio:\r\n    handler: src/laboratorios/actualizarLab.actualizarLab\r\n    events:\r\n      - httpApi:\r\n          path: /laboratorio/{id}\r\n          method: put\r\n\r\n  # Funciones para la tabla asignaturas\r\n  agregarAsignatura:\r\n    handler: src/asignaturas/agregarAsig.agregarAsig\r\n    events:\r\n      - httpApi:\r\n          path: /asignatura\r\n          method: post\r\n  \r\n  obtenerAsignatura:\r\n    handler: src/asignaturas/obtenerAsig.obtenerAsig\r\n    events:\r\n      - httpApi:\r\n          path: /asignatura/{id}\r\n          method: get\r\n\r\n  eliminarAsignatura:\r\n    handler: src/asignaturas/eliminarAsig.eliminarAsig\r\n    events:\r\n      - httpApi:\r\n          path: /asignatura/{id}\r\n          method: delete\r\n  \r\n  actualizarAsignatura:\r\n    handler: src/asignaturas/actualizarAsig.actualizarAsig\r\n    events:\r\n      - httpApi:\r\n          path: /asignatura/{id}\r\n          method: put\r\n\r\n  # Funciones para la tabla parciales\r\n  agregarParcial:\r\n    handler: src/parciales/agregarPar.agregarPar  \r\n    events:\r\n      - httpApi:\r\n          path: /parciales\r\n          method: post\r\n\r\n  obtenerParciales:\r\n    handler: src/parciales/obtenerPar.obtenerPar\r\n    events:\r\n      - httpApi:\r\n          path: /parciales\r\n          method: get\r\n  \r\n  eliminarParcial:\r\n    handler: src/parciales/eliminarPar.eliminarPar\r\n    events:\r\n      - httpApi:\r\n          path: /parciales/{id}\r\n          method: delete\r\n  \r\n  actualizarParcial:\r\n    handler: src/parciales/actualizarPar.actualizarPar\r\n    events:\r\n      - httpApi:\r\n          path: /parciales/{id}\r\n          method: put\r\n\r\n  # Funciones para la tabla practicas\r\n  agregarPractica:\r\n    handler: src/practicas/agregarPract.agregarPract  \r\n    events:\r\n      - httpApi:\r\n          path: /practicas\r\n          method: post\r\n\r\n  obtenerPracticas:\r\n    handler: src/practicas/obtenerPract.obtenerPract\r\n    events:\r\n      - httpApi:\r\n          path: /practicas\r\n          method: get\r\n\r\n  eliminarPractica:\r\n    handler: src/practicas/eliminarPract.eliminarPract\r\n    events:\r\n      - httpApi:\r\n          path: /practicas/{id}\r\n          method: delete\r\n\r\n  actualizarPractica:\r\n    handler: src/practicas/actualizarPract.actualizarPract\r\n    events:\r\n      - httpApi:\r\n          path: /practicas/{id}\r\n          method: put\r\n\r\n  # Funciones para la tabla usoEquipo\r\n  agregarUsoEquipo:\r\n    handler: src/usoEquipo/agregarEquip.agregarEquip\r\n    events:\r\n      - httpApi:\r\n          path: /usoEquipo\r\n          method: post\r\n\r\n  obtenerUsoEquipo:\r\n    handler: src/usoEquipo/obtenerEquip.obtenerEquip\r\n    events:\r\n      - httpApi:\r\n          path: /usoEquipo/{id}\r\n          method: get\r\n\r\n  eliminarUsoEquipo:\r\n    handler: src/usoEquipo/eliminarEquip.eliminarEquip\r\n    events:\r\n      - httpApi:\r\n          path: /usoEquipo/{id}\r\n          method: delete\r\n\r\n  actualizarUsoEquipo:\r\n    handler: src/usoEquipo/actualizarEquip.actualizarEquip\r\n    events:\r\n      - httpApi:\r\n          path: /usoEquipo/{id}\r\n          method: put\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "89118f95-1bba-43df-96ea-dd124558e6ec",
    "orgName": "melanymoreira",
    "userId": "kVcpMbMqq9YdBTRj8s",
    "userName": "melanymoreira",
    "serviceProviderAwsAccountId": "469647637171",
    "serviceProviderAwsCfStackName": "servidor-melanymoreira-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:469647637171:stack/servidor-melanymoreira-dev/ff09bef0-2d14-11f0-b6d7-0affc71f8aa9",
    "serviceProviderAwsCfStackCreated": "2025-05-09T20:34:25.115Z",
    "serviceProviderAwsCfStackUpdated": "2025-06-26T04:18:01.853Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "AgregarUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-agregarUser:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-AgregarUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EliminarLaboratorioLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-eliminarLaboratorio:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-EliminarLaboratorioLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ActualizarLaboratorioLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-actualizarLaboratorio:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ActualizarLaboratorioLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ObtenerParcialesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-obtenerParciales:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ObtenerParcialesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EliminarParcialLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-eliminarParcial:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-EliminarParcialLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "wab43twls6",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-servidor-melanymoreira-dev-HttpApiId"
      },
      {
        "OutputKey": "ObtenerUsoEquipoLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-obtenerUsoEquipo:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ObtenerUsoEquipoLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ActualizarParcialLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-actualizarParcial:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ActualizarParcialLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
        "ExportName": "sls-servidor-melanymoreira-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://wab43twls6.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-servidor-melanymoreira-dev-HttpApiUrl"
      },
      {
        "OutputKey": "ObtenerUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-obtenerUser:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ObtenerUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ActualizarUsoEquipoLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-actualizarUsoEquipo:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ActualizarUsoEquipoLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EliminarAsignaturaLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-eliminarAsignatura:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-EliminarAsignaturaLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ObtenerPracticasLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-obtenerPracticas:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ObtenerPracticasLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ObtenerAsignaturaLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-obtenerAsignatura:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ObtenerAsignaturaLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AgregarUsoEquipoLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-agregarUsoEquipo:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-AgregarUsoEquipoLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ActualizarUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-actualizarUser:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ActualizarUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ActualizarAsignaturaLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-actualizarAsignatura:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ActualizarAsignaturaLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EliminarUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-eliminarUser:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-EliminarUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AgregarLaboratorioLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-agregarLaboratorio:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-AgregarLaboratorioLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EliminarUsoEquipoLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-eliminarUsoEquipo:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-EliminarUsoEquipoLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AgregarPracticaLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-agregarPractica:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-AgregarPracticaLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ObtenerLaboratorioLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-obtenerLaboratorio:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ObtenerLaboratorioLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ActualizarPracticaLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-actualizarPractica:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-ActualizarPracticaLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AgregarAsignaturaLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-agregarAsignatura:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-AgregarAsignaturaLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AgregarParcialLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-agregarParcial:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-AgregarParcialLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EliminarPracticaLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:469647637171:function:servidor-melanymoreira-dev-eliminarPractica:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-servidor-melanymoreira-dev-EliminarPracticaLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "AgregarUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarUser"
          }
        },
        "ObtenerUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerUser"
          }
        },
        "EliminarUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarUser"
          }
        },
        "ActualizarUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarUser"
          }
        },
        "AgregarLaboratorioLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarLaboratorio"
          }
        },
        "ObtenerLaboratorioLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerLaboratorio"
          }
        },
        "EliminarLaboratorioLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarLaboratorio"
          }
        },
        "ActualizarLaboratorioLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarLaboratorio"
          }
        },
        "AgregarAsignaturaLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarAsignatura"
          }
        },
        "ObtenerAsignaturaLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerAsignatura"
          }
        },
        "EliminarAsignaturaLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarAsignatura"
          }
        },
        "ActualizarAsignaturaLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarAsignatura"
          }
        },
        "AgregarParcialLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarParcial"
          }
        },
        "ObtenerParcialesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerParciales"
          }
        },
        "EliminarParcialLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarParcial"
          }
        },
        "ActualizarParcialLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarParcial"
          }
        },
        "AgregarPracticaLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarPractica"
          }
        },
        "ObtenerPracticasLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerPracticas"
          }
        },
        "EliminarPracticaLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarPractica"
          }
        },
        "ActualizarPracticaLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarPractica"
          }
        },
        "AgregarUsoEquipoLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-agregarUsoEquipo"
          }
        },
        "ObtenerUsoEquipoLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-obtenerUsoEquipo"
          }
        },
        "EliminarUsoEquipoLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-eliminarUsoEquipo"
          }
        },
        "ActualizarUsoEquipoLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/servidor-melanymoreira-dev-actualizarUsoEquipo"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "servidor-melanymoreira",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/servidor-melanymoreira-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/servidor-melanymoreira-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:*"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:us-east-1:469647637171:table/usuario",
                        "arn:aws:dynamodb:us-east-1:469647637171:table/laboratorios",
                        "arn:aws:dynamodb:us-east-1:469647637171:table/asignaturas",
                        "arn:aws:dynamodb:us-east-1:469647637171:table/parciales",
                        "arn:aws:dynamodb:us-east-1:469647637171:table/practicas",
                        "arn:aws:dynamodb:us-east-1:469647637171:table/usoEquipo"
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "servidor-melanymoreira",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "AgregarUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/usuarios/agregarUser.agregarUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-agregarUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AgregarUserLogGroup"
          ]
        },
        "ObtenerUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/usuarios/obtenerUser.obtenerUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-obtenerUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ObtenerUserLogGroup"
          ]
        },
        "EliminarUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/usuarios/eliminarUser.eliminarUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-eliminarUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EliminarUserLogGroup"
          ]
        },
        "ActualizarUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/usuarios/actualizarUser.actualizarUser",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-actualizarUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ActualizarUserLogGroup"
          ]
        },
        "AgregarLaboratorioLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/laboratorios/agregarLab.agregarLab",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-agregarLaboratorio",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AgregarLaboratorioLogGroup"
          ]
        },
        "ObtenerLaboratorioLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/laboratorios/obtenerLab.obtenerLab",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-obtenerLaboratorio",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ObtenerLaboratorioLogGroup"
          ]
        },
        "EliminarLaboratorioLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/laboratorios/eliminarLab.eliminarLab",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-eliminarLaboratorio",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EliminarLaboratorioLogGroup"
          ]
        },
        "ActualizarLaboratorioLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/laboratorios/actualizarLab.actualizarLab",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-actualizarLaboratorio",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ActualizarLaboratorioLogGroup"
          ]
        },
        "AgregarAsignaturaLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/asignaturas/agregarAsig.agregarAsig",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-agregarAsignatura",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AgregarAsignaturaLogGroup"
          ]
        },
        "ObtenerAsignaturaLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/asignaturas/obtenerAsig.obtenerAsig",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-obtenerAsignatura",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ObtenerAsignaturaLogGroup"
          ]
        },
        "EliminarAsignaturaLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/asignaturas/eliminarAsig.eliminarAsig",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-eliminarAsignatura",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EliminarAsignaturaLogGroup"
          ]
        },
        "ActualizarAsignaturaLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/asignaturas/actualizarAsig.actualizarAsig",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-actualizarAsignatura",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ActualizarAsignaturaLogGroup"
          ]
        },
        "AgregarParcialLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/parciales/agregarPar.agregarPar",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-agregarParcial",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AgregarParcialLogGroup"
          ]
        },
        "ObtenerParcialesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/parciales/obtenerPar.obtenerPar",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-obtenerParciales",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ObtenerParcialesLogGroup"
          ]
        },
        "EliminarParcialLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/parciales/eliminarPar.eliminarPar",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-eliminarParcial",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EliminarParcialLogGroup"
          ]
        },
        "ActualizarParcialLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/parciales/actualizarPar.actualizarPar",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-actualizarParcial",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ActualizarParcialLogGroup"
          ]
        },
        "AgregarPracticaLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/practicas/agregarPract.agregarPract",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-agregarPractica",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AgregarPracticaLogGroup"
          ]
        },
        "ObtenerPracticasLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/practicas/obtenerPract.obtenerPract",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-obtenerPracticas",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ObtenerPracticasLogGroup"
          ]
        },
        "EliminarPracticaLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/practicas/eliminarPract.eliminarPract",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-eliminarPractica",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EliminarPracticaLogGroup"
          ]
        },
        "ActualizarPracticaLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/practicas/actualizarPract.actualizarPract",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-actualizarPractica",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ActualizarPracticaLogGroup"
          ]
        },
        "AgregarUsoEquipoLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/usoEquipo/agregarEquip.agregarEquip",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-agregarUsoEquipo",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AgregarUsoEquipoLogGroup"
          ]
        },
        "ObtenerUsoEquipoLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/usoEquipo/obtenerEquip.obtenerEquip",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-obtenerUsoEquipo",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ObtenerUsoEquipoLogGroup"
          ]
        },
        "EliminarUsoEquipoLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/usoEquipo/eliminarEquip.eliminarEquip",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-eliminarUsoEquipo",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EliminarUsoEquipoLogGroup"
          ]
        },
        "ActualizarUsoEquipoLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
              "S3Key": "serverless/servidor-melanymoreira/dev/1750911758496-2025-06-26T04:22:38.496Z/servidor-melanymoreira.zip"
            },
            "Handler": "src/usoEquipo/actualizarEquip.actualizarEquip",
            "Runtime": "nodejs20.x",
            "FunctionName": "servidor-melanymoreira-dev-actualizarUsoEquipo",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ActualizarUsoEquipoLogGroup"
          ]
        },
        "AgregarUserLambdaVersionRgxEkZf66J79z4KD8QSA3TFVIEn7PRNCbLeasEdKU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AgregarUserLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ObtenerUserLambdaVersiono1AwuFyD5Jz9Aaqe23lzO7ehQaprOBZ1XVK9Ksehk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ObtenerUserLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "EliminarUserLambdaVersionlXaBJONwY1nCyKXQVhaHBrOJ9FuVWvyuP6gev5weis": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EliminarUserLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ActualizarUserLambdaVersionQBYO9DW55p0We32cSNNhYRx8Wwf9U27rCYXjFfvZmQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ActualizarUserLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "AgregarLaboratorioLambdaVersionvwoTv7sOQhbMMQmsUMRqyco1rLgC0cuKC73AkOUWts": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AgregarLaboratorioLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ObtenerLaboratorioLambdaVersionfkrvHMFzgJx5nxEzYUUGjIKgsYDEoS2Gx9mvlNOOSig": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ObtenerLaboratorioLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "EliminarLaboratorioLambdaVersionu7UKtobNoe19Q0D3xFUxUdIWzNhlhruYbLxPFvE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EliminarLaboratorioLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ActualizarLaboratorioLambdaVersion2i6bpCy2KrnE1T23D4LjwUJL9yT0pHNhNlU7Fihlf8s": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ActualizarLaboratorioLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "AgregarAsignaturaLambdaVersion2c7xU17MkygCHd7T0CjZXcP3YJ9bKwUdnUptErkKus": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AgregarAsignaturaLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ObtenerAsignaturaLambdaVersioneulum2JQ9L6sU9kYmpulrc5181ikieHdDTEKJaukw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ObtenerAsignaturaLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "EliminarAsignaturaLambdaVersiontgYA4aYEAC4fWhMa46rQFIIZFZA4Vh7n4zEuKtgsU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EliminarAsignaturaLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ActualizarAsignaturaLambdaVersionIbf9MjzHCFCxkwZqo7LpRbwLDhZCGCuVw8McabVQs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ActualizarAsignaturaLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "AgregarParcialLambdaVersionQCXVCo3ziFGCrPJvfpWcfQQNBvfkKRaaXruprryKms": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AgregarParcialLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ObtenerParcialesLambdaVersionWwSoTDRxqM5VWd2pu4Xms6kfMkc6WWPhzo2cc5DUVw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ObtenerParcialesLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "EliminarParcialLambdaVersionovWBDb28gcYu703xi9vPoUFPnMImwEzR2xMZkH21gA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EliminarParcialLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ActualizarParcialLambdaVersionTcC6iYVoYDbz00NnE6SSlRyjf1wrrs6oRSyIairi5k": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ActualizarParcialLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "AgregarPracticaLambdaVersion0oTxP2ZNOWlbzkym26M8ugz3w0c5CfrM5dWe4mhRt0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AgregarPracticaLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ObtenerPracticasLambdaVersion4t8hqSFvAhwnCMYWjIt4ElIO8pwv1lIV4ljZn3xf3TE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ObtenerPracticasLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "EliminarPracticaLambdaVersionj3hnFogLjhtL9vTLCZERJfuTqabuKC0RnjNCdaHQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EliminarPracticaLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ActualizarPracticaLambdaVersioncKQHIuYEZrNbXuGbT6DopAjZij5jraZcnj581zqebZQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ActualizarPracticaLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "AgregarUsoEquipoLambdaVersionH2L2K8YBryUTTe1GHNeB40ExYrEoDp2fAslmliMWTe8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AgregarUsoEquipoLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ObtenerUsoEquipoLambdaVersionPzBK5I7ACFll20wS1jSONs6cjSfnrVaCEAmUSEkY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ObtenerUsoEquipoLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "EliminarUsoEquipoLambdaVersionNv7uLlTMO4AtgnM3wrYYTao3qk8Pzez8G2If0gQb5OY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EliminarUsoEquipoLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "ActualizarUsoEquipoLambdaVersionFITmFcwU5o6HxgNk8bo1g2rSaXnWLRd3j3V1DaBUnY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ActualizarUsoEquipoLambdaFunction"
            },
            "CodeSha256": "iDrH+QdsJ8c+jSsJ0KQqdNImg/ylThBxpuLmLB6SZOM="
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-servidor-melanymoreira",
            "ProtocolType": "HTTP"
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "AgregarUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AgregarUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationAgregarUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "AgregarUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostUsuario": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /usuario",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationAgregarUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationAgregarUser"
        },
        "ObtenerUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ObtenerUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationObtenerUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ObtenerUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetUsuarioIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /usuario/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationObtenerUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationObtenerUser"
        },
        "EliminarUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EliminarUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEliminarUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EliminarUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteUsuarioIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /usuario/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEliminarUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEliminarUser"
        },
        "ActualizarUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ActualizarUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationActualizarUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ActualizarUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutUsuarioIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /usuario/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationActualizarUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationActualizarUser"
        },
        "AgregarLaboratorioLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AgregarLaboratorioLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationAgregarLaboratorio": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "AgregarLaboratorioLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostLaboratorio": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /laboratorio",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationAgregarLaboratorio"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationAgregarLaboratorio"
        },
        "ObtenerLaboratorioLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ObtenerLaboratorioLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationObtenerLaboratorio": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ObtenerLaboratorioLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetLaboratorioIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /laboratorio/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationObtenerLaboratorio"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationObtenerLaboratorio"
        },
        "EliminarLaboratorioLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EliminarLaboratorioLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEliminarLaboratorio": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EliminarLaboratorioLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteLaboratorioIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /laboratorio/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEliminarLaboratorio"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEliminarLaboratorio"
        },
        "ActualizarLaboratorioLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ActualizarLaboratorioLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationActualizarLaboratorio": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ActualizarLaboratorioLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutLaboratorioIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /laboratorio/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationActualizarLaboratorio"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationActualizarLaboratorio"
        },
        "AgregarAsignaturaLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AgregarAsignaturaLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationAgregarAsignatura": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "AgregarAsignaturaLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostAsignatura": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /asignatura",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationAgregarAsignatura"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationAgregarAsignatura"
        },
        "ObtenerAsignaturaLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ObtenerAsignaturaLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationObtenerAsignatura": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ObtenerAsignaturaLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetAsignaturaIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /asignatura/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationObtenerAsignatura"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationObtenerAsignatura"
        },
        "EliminarAsignaturaLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EliminarAsignaturaLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEliminarAsignatura": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EliminarAsignaturaLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteAsignaturaIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /asignatura/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEliminarAsignatura"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEliminarAsignatura"
        },
        "ActualizarAsignaturaLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ActualizarAsignaturaLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationActualizarAsignatura": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ActualizarAsignaturaLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutAsignaturaIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /asignatura/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationActualizarAsignatura"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationActualizarAsignatura"
        },
        "AgregarParcialLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AgregarParcialLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationAgregarParcial": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "AgregarParcialLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostParciales": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /parciales",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationAgregarParcial"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationAgregarParcial"
        },
        "ObtenerParcialesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ObtenerParcialesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationObtenerParciales": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ObtenerParcialesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetParciales": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /parciales",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationObtenerParciales"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationObtenerParciales"
        },
        "EliminarParcialLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EliminarParcialLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEliminarParcial": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EliminarParcialLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteParcialesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /parciales/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEliminarParcial"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEliminarParcial"
        },
        "ActualizarParcialLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ActualizarParcialLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationActualizarParcial": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ActualizarParcialLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutParcialesIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /parciales/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationActualizarParcial"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationActualizarParcial"
        },
        "AgregarPracticaLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AgregarPracticaLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationAgregarPractica": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "AgregarPracticaLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostPracticas": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /practicas",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationAgregarPractica"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationAgregarPractica"
        },
        "ObtenerPracticasLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ObtenerPracticasLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationObtenerPracticas": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ObtenerPracticasLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetPracticas": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /practicas",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationObtenerPracticas"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationObtenerPracticas"
        },
        "EliminarPracticaLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EliminarPracticaLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEliminarPractica": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EliminarPracticaLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeletePracticasIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /practicas/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEliminarPractica"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEliminarPractica"
        },
        "ActualizarPracticaLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ActualizarPracticaLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationActualizarPractica": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ActualizarPracticaLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutPracticasIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /practicas/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationActualizarPractica"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationActualizarPractica"
        },
        "AgregarUsoEquipoLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AgregarUsoEquipoLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationAgregarUsoEquipo": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "AgregarUsoEquipoLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostUsoequipo": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /usoEquipo",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationAgregarUsoEquipo"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationAgregarUsoEquipo"
        },
        "ObtenerUsoEquipoLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ObtenerUsoEquipoLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationObtenerUsoEquipo": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ObtenerUsoEquipoLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetUsoequipoIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /usoEquipo/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationObtenerUsoEquipo"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationObtenerUsoEquipo"
        },
        "EliminarUsoEquipoLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EliminarUsoEquipoLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEliminarUsoEquipo": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EliminarUsoEquipoLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteUsoequipoIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /usoEquipo/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEliminarUsoEquipo"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEliminarUsoEquipo"
        },
        "ActualizarUsoEquipoLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ActualizarUsoEquipoLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationActualizarUsoEquipo": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ActualizarUsoEquipoLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePutUsoequipoIdVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PUT /usoEquipo/{id}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationActualizarUsoEquipo"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationActualizarUsoEquipo"
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-d6410a1c-8fc2",
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ServerlessDeploymentBucketName"
          }
        },
        "AgregarUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AgregarUserLambdaVersionRgxEkZf66J79z4KD8QSA3TFVIEn7PRNCbLeasEdKU"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-AgregarUserLambdaFunctionQualifiedArn"
          }
        },
        "ObtenerUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ObtenerUserLambdaVersiono1AwuFyD5Jz9Aaqe23lzO7ehQaprOBZ1XVK9Ksehk"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ObtenerUserLambdaFunctionQualifiedArn"
          }
        },
        "EliminarUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EliminarUserLambdaVersionlXaBJONwY1nCyKXQVhaHBrOJ9FuVWvyuP6gev5weis"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-EliminarUserLambdaFunctionQualifiedArn"
          }
        },
        "ActualizarUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ActualizarUserLambdaVersionQBYO9DW55p0We32cSNNhYRx8Wwf9U27rCYXjFfvZmQ"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ActualizarUserLambdaFunctionQualifiedArn"
          }
        },
        "AgregarLaboratorioLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AgregarLaboratorioLambdaVersionvwoTv7sOQhbMMQmsUMRqyco1rLgC0cuKC73AkOUWts"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-AgregarLaboratorioLambdaFunctionQualifiedArn"
          }
        },
        "ObtenerLaboratorioLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ObtenerLaboratorioLambdaVersionfkrvHMFzgJx5nxEzYUUGjIKgsYDEoS2Gx9mvlNOOSig"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ObtenerLaboratorioLambdaFunctionQualifiedArn"
          }
        },
        "EliminarLaboratorioLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EliminarLaboratorioLambdaVersionu7UKtobNoe19Q0D3xFUxUdIWzNhlhruYbLxPFvE"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-EliminarLaboratorioLambdaFunctionQualifiedArn"
          }
        },
        "ActualizarLaboratorioLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ActualizarLaboratorioLambdaVersion2i6bpCy2KrnE1T23D4LjwUJL9yT0pHNhNlU7Fihlf8s"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ActualizarLaboratorioLambdaFunctionQualifiedArn"
          }
        },
        "AgregarAsignaturaLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AgregarAsignaturaLambdaVersion2c7xU17MkygCHd7T0CjZXcP3YJ9bKwUdnUptErkKus"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-AgregarAsignaturaLambdaFunctionQualifiedArn"
          }
        },
        "ObtenerAsignaturaLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ObtenerAsignaturaLambdaVersioneulum2JQ9L6sU9kYmpulrc5181ikieHdDTEKJaukw"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ObtenerAsignaturaLambdaFunctionQualifiedArn"
          }
        },
        "EliminarAsignaturaLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EliminarAsignaturaLambdaVersiontgYA4aYEAC4fWhMa46rQFIIZFZA4Vh7n4zEuKtgsU"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-EliminarAsignaturaLambdaFunctionQualifiedArn"
          }
        },
        "ActualizarAsignaturaLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ActualizarAsignaturaLambdaVersionIbf9MjzHCFCxkwZqo7LpRbwLDhZCGCuVw8McabVQs"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ActualizarAsignaturaLambdaFunctionQualifiedArn"
          }
        },
        "AgregarParcialLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AgregarParcialLambdaVersionQCXVCo3ziFGCrPJvfpWcfQQNBvfkKRaaXruprryKms"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-AgregarParcialLambdaFunctionQualifiedArn"
          }
        },
        "ObtenerParcialesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ObtenerParcialesLambdaVersionWwSoTDRxqM5VWd2pu4Xms6kfMkc6WWPhzo2cc5DUVw"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ObtenerParcialesLambdaFunctionQualifiedArn"
          }
        },
        "EliminarParcialLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EliminarParcialLambdaVersionovWBDb28gcYu703xi9vPoUFPnMImwEzR2xMZkH21gA"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-EliminarParcialLambdaFunctionQualifiedArn"
          }
        },
        "ActualizarParcialLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ActualizarParcialLambdaVersionTcC6iYVoYDbz00NnE6SSlRyjf1wrrs6oRSyIairi5k"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ActualizarParcialLambdaFunctionQualifiedArn"
          }
        },
        "AgregarPracticaLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AgregarPracticaLambdaVersion0oTxP2ZNOWlbzkym26M8ugz3w0c5CfrM5dWe4mhRt0"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-AgregarPracticaLambdaFunctionQualifiedArn"
          }
        },
        "ObtenerPracticasLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ObtenerPracticasLambdaVersion4t8hqSFvAhwnCMYWjIt4ElIO8pwv1lIV4ljZn3xf3TE"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ObtenerPracticasLambdaFunctionQualifiedArn"
          }
        },
        "EliminarPracticaLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EliminarPracticaLambdaVersionj3hnFogLjhtL9vTLCZERJfuTqabuKC0RnjNCdaHQ"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-EliminarPracticaLambdaFunctionQualifiedArn"
          }
        },
        "ActualizarPracticaLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ActualizarPracticaLambdaVersioncKQHIuYEZrNbXuGbT6DopAjZij5jraZcnj581zqebZQ"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ActualizarPracticaLambdaFunctionQualifiedArn"
          }
        },
        "AgregarUsoEquipoLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AgregarUsoEquipoLambdaVersionH2L2K8YBryUTTe1GHNeB40ExYrEoDp2fAslmliMWTe8"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-AgregarUsoEquipoLambdaFunctionQualifiedArn"
          }
        },
        "ObtenerUsoEquipoLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ObtenerUsoEquipoLambdaVersionPzBK5I7ACFll20wS1jSONs6cjSfnrVaCEAmUSEkY"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ObtenerUsoEquipoLambdaFunctionQualifiedArn"
          }
        },
        "EliminarUsoEquipoLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EliminarUsoEquipoLambdaVersionNv7uLlTMO4AtgnM3wrYYTao3qk8Pzez8G2If0gQb5OY"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-EliminarUsoEquipoLambdaFunctionQualifiedArn"
          }
        },
        "ActualizarUsoEquipoLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ActualizarUsoEquipoLambdaVersionFITmFcwU5o6HxgNk8bo1g2rSaXnWLRd3j3V1DaBUnY"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-ActualizarUsoEquipoLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-servidor-melanymoreira-dev-HttpApiUrl"
          }
        }
      }
    }
  },
  "C:\\Users\\grego\\OneDrive\\Escritorio\\Tarea3_C\\serverless.yml": {
    "versionFramework": "4.17.1",
    "servicePath": "C:\\Users\\grego\\OneDrive\\Escritorio\\Tarea3_C\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "melanymoreira",
      "app": "servidor-melanymoreira",
      "service": "servidor-melanymoreira",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:*"
            ],
            "Resource": [
              "arn:aws:dynamodb:us-east-1:469647637171:table/usuario",
              "arn:aws:dynamodb:us-east-1:469647637171:table/laboratorios",
              "arn:aws:dynamodb:us-east-1:469647637171:table/asignaturas",
              "arn:aws:dynamodb:us-east-1:469647637171:table/parciales",
              "arn:aws:dynamodb:us-east-1:469647637171:table/practicas",
              "arn:aws:dynamodb:us-east-1:469647637171:table/usoEquipo"
            ]
          }
        ]
      },
      "functions": {
        "agregarUser": {
          "handler": "src/usuarios/agregarUser.agregarUser",
          "events": [
            {
              "httpApi": {
                "path": "/usuario",
                "method": "post"
              }
            }
          ]
        },
        "obtenerUser": {
          "handler": "src/usuarios/obtenerUser.obtenerUser",
          "events": [
            {
              "httpApi": {
                "path": "/usuario/{id}",
                "method": "get"
              }
            }
          ]
        },
        "eliminarUser": {
          "handler": "src/usuarios/eliminarUser.eliminarUser",
          "events": [
            {
              "httpApi": {
                "path": "/usuario/{id}",
                "method": "delete"
              }
            }
          ]
        },
        "actualizarUser": {
          "handler": "src/usuarios/actualizarUser.actualizarUser",
          "events": [
            {
              "httpApi": {
                "path": "/usuario/{id}",
                "method": "put"
              }
            }
          ]
        },
        "agregarLaboratorio": {
          "handler": "src/laboratorios/agregarLab.agregarLab",
          "events": [
            {
              "httpApi": {
                "path": "/laboratorio",
                "method": "post"
              }
            }
          ]
        },
        "obtenerLaboratorio": {
          "handler": "src/laboratorios/obtenerLab.obtenerLab",
          "events": [
            {
              "httpApi": {
                "path": "/laboratorio/{id}",
                "method": "get"
              }
            }
          ]
        },
        "eliminarLaboratorio": {
          "handler": "src/laboratorios/eliminarLab.eliminarLab",
          "events": [
            {
              "httpApi": {
                "path": "/laboratorio/{id}",
                "method": "delete"
              }
            }
          ]
        },
        "actualizarLaboratorio": {
          "handler": "src/laboratorios/actualizarLab.actualizarLab",
          "events": [
            {
              "httpApi": {
                "path": "/laboratorio/{id}",
                "method": "put"
              }
            }
          ]
        },
        "agregarAsignatura": {
          "handler": "src/asignaturas/agregarAsig.agregarAsig",
          "events": [
            {
              "httpApi": {
                "path": "/asignatura",
                "method": "post"
              }
            }
          ]
        },
        "obtenerAsignatura": {
          "handler": "src/asignaturas/obtenerAsig.obtenerAsig",
          "events": [
            {
              "httpApi": {
                "path": "/asignatura/{id}",
                "method": "get"
              }
            }
          ]
        },
        "eliminarAsignatura": {
          "handler": "src/asignaturas/eliminarAsig.eliminarAsig",
          "events": [
            {
              "httpApi": {
                "path": "/asignatura/{id}",
                "method": "delete"
              }
            }
          ]
        },
        "actualizarAsignatura": {
          "handler": "src/asignaturas/actualizarAsig.actualizarAsig",
          "events": [
            {
              "httpApi": {
                "path": "/asignatura/{id}",
                "method": "put"
              }
            }
          ]
        },
        "agregarParcial": {
          "handler": "src/parciales/agregarPar.agregarPar",
          "events": [
            {
              "httpApi": {
                "path": "/parciales",
                "method": "post"
              }
            }
          ]
        },
        "obtenerParciales": {
          "handler": "src/parciales/obtenerPar.obtenerPar",
          "events": [
            {
              "httpApi": {
                "path": "/parciales",
                "method": "get"
              }
            }
          ]
        },
        "eliminarParcial": {
          "handler": "src/parciales/eliminarPar.eliminarPar",
          "events": [
            {
              "httpApi": {
                "path": "/parciales/{id}",
                "method": "delete"
              }
            }
          ]
        },
        "actualizarParcial": {
          "handler": "src/parciales/actualizarPar.actualizarPar",
          "events": [
            {
              "httpApi": {
                "path": "/parciales/{id}",
                "method": "put"
              }
            }
          ]
        },
        "agregarPractica": {
          "handler": "src/practicas/agregarPract.agregarPract",
          "events": [
            {
              "httpApi": {
                "path": "/practicas",
                "method": "post"
              }
            }
          ]
        },
        "obtenerPracticas": {
          "handler": "src/practicas/obtenerPract.obtenerPract",
          "events": [
            {
              "httpApi": {
                "path": "/practicas",
                "method": "get"
              }
            }
          ]
        },
        "eliminarPractica": {
          "handler": "src/practicas/eliminarPract.eliminarPract",
          "events": [
            {
              "httpApi": {
                "path": "/practicas/{id}",
                "method": "delete"
              }
            }
          ]
        },
        "actualizarPractica": {
          "handler": "src/practicas/actualizarPract.actualizarPract",
          "events": [
            {
              "httpApi": {
                "path": "/practicas/{id}",
                "method": "put"
              }
            }
          ]
        },
        "agregarUsoEquipo": {
          "handler": "src/usoEquipo/agregarEquip.agregarEquip",
          "events": [
            {
              "httpApi": {
                "path": "/usoEquipo",
                "method": "post"
              }
            }
          ]
        },
        "obtenerUsoEquipo": {
          "handler": "src/usoEquipo/obtenerEquip.obtenerEquip",
          "events": [
            {
              "httpApi": {
                "path": "/usoEquipo/{id}",
                "method": "get"
              }
            }
          ]
        },
        "eliminarUsoEquipo": {
          "handler": "src/usoEquipo/eliminarEquip.eliminarEquip",
          "events": [
            {
              "httpApi": {
                "path": "/usoEquipo/{id}",
                "method": "delete"
              }
            }
          ]
        },
        "actualizarUsoEquipo": {
          "handler": "src/usoEquipo/actualizarEquip.actualizarEquip",
          "events": [
            {
              "httpApi": {
                "path": "/usoEquipo/{id}",
                "method": "put"
              }
            }
          ]
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:*"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:469647637171:table/usuario",
            "arn:aws:dynamodb:us-east-1:469647637171:table/laboratorios",
            "arn:aws:dynamodb:us-east-1:469647637171:table/asignaturas",
            "arn:aws:dynamodb:us-east-1:469647637171:table/parciales",
            "arn:aws:dynamodb:us-east-1:469647637171:table/practicas",
            "arn:aws:dynamodb:us-east-1:469647637171:table/usoEquipo"
          ]
        }
      ]
    },
    "error": {
      "message": "You are not a member of the Org \"melanymoreira\". Verify the \"org\" in your Service configuration (e.g. serverless.yml) or that you're providing manually is one your User Account or License Key has access to. Lastly, check the .serverlessrc file in the home directory of your machine to better understand what user account or License Key you are currently using. You can run \"serverless login\" to change the user account or License Key you are using.",
      "stack": "Error: You are not a member of the Org \"melanymoreira\". Verify the \"org\" in your Service configuration (e.g. serverless.yml) or that you're providing manually is one your User Account or License Key has access to. Lastly, check the .serverlessrc file in the home directory of your machine to better understand what user account or License Key you are currently using. You can run \"serverless login\" to change the user account or License Key you are using.\n    at Authentication.getAuthenticatedData (file:///C:/Users/grego/.serverless/releases/4.17.1/package/dist/sf-core.js:830:3154)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Authentication.authenticate (file:///C:/Users/grego/.serverless/releases/4.17.1/package/dist/sf-core.js:830:22245)\n    at async TraditionalRunner.resolveVariablesAndAuthenticate (file:///C:/Users/grego/.serverless/releases/4.17.1/package/dist/sf-core.js:834:2379)\n    at async TraditionalRunner.run (file:///C:/Users/grego/.serverless/releases/4.17.1/package/dist/sf-core.js:1407:27919)\n    at async route (file:///C:/Users/grego/.serverless/releases/4.17.1/package/dist/sf-core.js:1582:2878)\n    at async Object.run (file:///C:/Users/grego/.serverless/releases/4.17.1/package/dist/sf-core.js:1583:3661)\n    at async run2 (file:///C:/Users/grego/.serverless/releases/4.17.1/package/dist/sf-core.js:1583:4815)"
    },
    "serviceRawFile": "org: melanymoreira\r\napp: servidor-melanymoreira\r\nservice: servidor-melanymoreira\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:*\r\n      Resource:\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/usuario\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/laboratorios\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/asignaturas\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/parciales\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/practicas\r\n          - arn:aws:dynamodb:us-east-1:469647637171:table/usoEquipo\r\n\r\nfunctions:\r\n  # Funciones para la tabla usuarios\r\n  agregarUser:\r\n    handler: src/usuarios/agregarUser.agregarUser\r\n    events:\r\n      - httpApi:\r\n          path: /usuario\r\n          method: post\r\n\r\n  obtenerUser:\r\n    handler: src/usuarios/obtenerUser.obtenerUser\r\n    events:\r\n      - httpApi:\r\n          path: /usuario/{id}\r\n          method: get\r\n\r\n  eliminarUser:\r\n    handler: src/usuarios/eliminarUser.eliminarUser\r\n    events:\r\n      - httpApi:\r\n          path: /usuario/{id}\r\n          method: delete\r\n\r\n  actualizarUser:\r\n    handler: src/usuarios/actualizarUser.actualizarUser\r\n    events:\r\n      - httpApi:\r\n          path: /usuario/{id}\r\n          method: put\r\n  \r\n  # Funciones para la tabla laboratorios\r\n  agregarLaboratorio:\r\n    handler: src/laboratorios/agregarLab.agregarLab\r\n    events:\r\n      - httpApi:\r\n          path: /laboratorio\r\n          method: post\r\n  \r\n  obtenerLaboratorio:\r\n    handler: src/laboratorios/obtenerLab.obtenerLab\r\n    events:\r\n      - httpApi:\r\n          path: /laboratorio/{id}\r\n          method: get\r\n  \r\n  eliminarLaboratorio:\r\n    handler: src/laboratorios/eliminarLab.eliminarLab\r\n    events:\r\n      - httpApi:\r\n          path: /laboratorio/{id}\r\n          method: delete\r\n  \r\n  actualizarLaboratorio:\r\n    handler: src/laboratorios/actualizarLab.actualizarLab\r\n    events:\r\n      - httpApi:\r\n          path: /laboratorio/{id}\r\n          method: put\r\n\r\n  # Funciones para la tabla asignaturas\r\n  agregarAsignatura:\r\n    handler: src/asignaturas/agregarAsig.agregarAsig\r\n    events:\r\n      - httpApi:\r\n          path: /asignatura\r\n          method: post\r\n  \r\n  obtenerAsignatura:\r\n    handler: src/asignaturas/obtenerAsig.obtenerAsig\r\n    events:\r\n      - httpApi:\r\n          path: /asignatura/{id}\r\n          method: get\r\n\r\n  eliminarAsignatura:\r\n    handler: src/asignaturas/eliminarAsig.eliminarAsig\r\n    events:\r\n      - httpApi:\r\n          path: /asignatura/{id}\r\n          method: delete\r\n  \r\n  actualizarAsignatura:\r\n    handler: src/asignaturas/actualizarAsig.actualizarAsig\r\n    events:\r\n      - httpApi:\r\n          path: /asignatura/{id}\r\n          method: put\r\n\r\n  # Funciones para la tabla parciales\r\n  agregarParcial:\r\n    handler: src/parciales/agregarPar.agregarPar  \r\n    events:\r\n      - httpApi:\r\n          path: /parciales\r\n          method: post\r\n\r\n  obtenerParciales:\r\n    handler: src/parciales/obtenerPar.obtenerPar\r\n    events:\r\n      - httpApi:\r\n          path: /parciales\r\n          method: get\r\n  \r\n  eliminarParcial:\r\n    handler: src/parciales/eliminarPar.eliminarPar\r\n    events:\r\n      - httpApi:\r\n          path: /parciales/{id}\r\n          method: delete\r\n  \r\n  actualizarParcial:\r\n    handler: src/parciales/actualizarPar.actualizarPar\r\n    events:\r\n      - httpApi:\r\n          path: /parciales/{id}\r\n          method: put\r\n\r\n  # Funciones para la tabla practicas\r\n  agregarPractica:\r\n    handler: src/practicas/agregarPract.agregarPract  \r\n    events:\r\n      - httpApi:\r\n          path: /practicas\r\n          method: post\r\n\r\n  obtenerPracticas:\r\n    handler: src/practicas/obtenerPract.obtenerPract\r\n    events:\r\n      - httpApi:\r\n          path: /practicas\r\n          method: get\r\n\r\n  eliminarPractica:\r\n    handler: src/practicas/eliminarPract.eliminarPract\r\n    events:\r\n      - httpApi:\r\n          path: /practicas/{id}\r\n          method: delete\r\n\r\n  actualizarPractica:\r\n    handler: src/practicas/actualizarPract.actualizarPract\r\n    events:\r\n      - httpApi:\r\n          path: /practicas/{id}\r\n          method: put\r\n\r\n  # Funciones para la tabla usoEquipo\r\n  agregarUsoEquipo:\r\n    handler: src/usoEquipo/agregarEquip.agregarEquip\r\n    events:\r\n      - httpApi:\r\n          path: /usoEquipo\r\n          method: post\r\n\r\n  obtenerUsoEquipo:\r\n    handler: src/usoEquipo/obtenerEquip.obtenerEquip\r\n    events:\r\n      - httpApi:\r\n          path: /usoEquipo/{id}\r\n          method: get\r\n\r\n  eliminarUsoEquipo:\r\n    handler: src/usoEquipo/eliminarEquip.eliminarEquip\r\n    events:\r\n      - httpApi:\r\n          path: /usoEquipo/{id}\r\n          method: delete\r\n\r\n  actualizarUsoEquipo:\r\n    handler: src/usoEquipo/actualizarEquip.actualizarEquip\r\n    events:\r\n      - httpApi:\r\n          path: /usoEquipo/{id}\r\n          method: put\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}